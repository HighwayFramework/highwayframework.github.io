<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: onramp-mvc | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/onramp-mvc/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2014-04-10T11:22:35-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Highway.OnRamp.MVC v3.0.2 Released]]></title>
    <link href="http://hwyfwk.com/blog/2014/04/10/highway-dot-onramp-dot-mvc-v3-dot-0-2-released/"/>
    <updated>2014-04-10T11:18:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2014/04/10/highway-dot-onramp-dot-mvc-v3-dot-0-2-released</id>
    <content type="html"><![CDATA[<p>Today we released a minor bug fix to the Highway.OnRamp.MVC packages, this included the following changes:</p>

<ul>
<li>Moving <code>BaseRestApiController</code> from Highway.OnRamp.MVC to Highway.OnRamp.MVC.Data.  This was an error in packaging previously which resulted in errors if you only installed Highway.OnRamp.MVC.</li>
<li>Increased the dependency version of Highway.OnRamp.MVC.Data for Highway.Data from v5.0 to v5.0.6.  This removes the requirement for you to be using .NET Framework v4.5.1 and now merely required .NET Framework v4.5.</li>
</ul>


<p>All other functionality is unchanged, all current documentation is still accurate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session and Configuration access via Interfaces]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/session-and-configuration-access-via-interfaces/"/>
    <updated>2014-01-25T19:33:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/session-and-configuration-access-via-interfaces</id>
    <content type="html"><![CDATA[<p>There are two things which are historically very hard to deal with when unit testing a websites, these are configuration values, and session variables.  They both present largely the same problem, they are normally accessible via an API that is not conducive to testing, both are static classes, and that API retrieves data from them via &ldquo;magic strings&rdquo;.  The Castle Project has a wonderful component within it called <code>DictionaryAdapter</code> which can help solve these pains for us very easily, once you understand how it works.</p>

<h1>Dictionary Adapter</h1>

<p>Dictionary Adapter is a class which creates classes at runtime that implement an interface you specify, and wires the properties of said interface to access a key value store you specify.  For instance, let&rsquo;s assume you have the following interface:</p>

<p>```
public interface IConnectionStringConfig
{</p>

<pre><code>string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<p>And the following configuration settings in your web.config:</p>

<p>```
  <appSettings></p>

<pre><code>&lt;add key="ConnectionString" value="Server=.;Database=ChangeMyConnectionString;Integrated Security=true;" /&gt;
</code></pre>

<p>  </appSettings>
```</p>

<p>Now we can ask Dictionary Adapter to create an instance of <code>IConnectionString</code>, and supply it the app settings from our web.config.  It will return to us a class which implements our interface, and when that when the <code>ConnectionString</code> property is accessed, will retrieve the value from app settings.</p>

<p>Now instead of writing controllers, or other classes which access app settings directly from the <code>ConfigurationManager</code>, we can instead simply take a dependency on <code>IConnectionString</code>, and that class can in turn use a strongly typed (no magic strings) and testable (simply mock the interface) way of accessing app settings.</p>

<p>Just as we can do this with the key value store of app settings, we can also do it with the key value store of <code>Session</code> as well.  This makes accessing session also no longer require magic strings, and addresses the problem of mocking an <code>HttpContext</code> for <code>Session</code>.</p>

<h1>Wiring it up with Windsor</h1>

<p>As awesome as that is, manually registering all of the configuration or session interfaces would be rather tedious in the extreme.  As such we&rsquo;ve created some conventions you can use that will automatically register these interfaces for you.</p>

<h2>Config interfaces</h2>

<p>Any interface in your application&rsquo;s assembly which has a name that ends in <strong>Config</strong> will automatically be registered with our IoC container with a class instance provided by <code>DictionaryAdapter</code>.  These classes are registered as Singleton lifestyle, because they continue to directly access the <code>ConfigurationManager</code> and so even if your configuration values change at runtime, they will stay up to date.</p>

<h2>Session interfaces</h2>

<p>Any interface in your application&rsquo;s assembly which has a name that ends in <strong>Session</strong> will automatically be registered with our IoC container with a class instance provided by <code>DictionaryAdapter</code>.  These classes are registered with a <code>PerWebRequest</code> lifestyle, because every request will have a different <code>HttpContext</code>.</p>

<h1>What about keys which don&rsquo;t match property names?</h1>

<p>A common scenario for users of DictionaryAdapter to run into is that they want properties on their interfaces which do not match their key value store&rsquo;s key values exactly.  This is easy to run into simply because of the limitations of property names, for instance &ldquo;ida:ClientSecret&rdquo; is not a valid property name.  So how do we handle this?</p>

<p>DictionaryAdapter provides a set of attributes which can help address these concerns.  We&rsquo;ll talk about each in turn, here they are:</p>

<ul>
<li><code>KeyAttribute</code></li>
<li><code>KeyPrefixAttribute</code></li>
<li><code>KeySuffixAttribute</code></li>
</ul>


<h2>Key</h2>

<p>The simplest and often most useful of our helper attributes is <code>KeyAttribute</code>.  This attribute when applied to a property completely changes the key in the key value store that is accessed for our property.  For instance, given the following interface, the <code>ConnectionSting</code> property returns &ldquo;Foo&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeyAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[Key("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<h2>KeyPrefixAttribute</h2>

<p>The next most common attribute to be used, and one which we use by default in the Data extension to the OnRamp, is <code>KeyPrefixAttirbute</code>.  This attribute is applied to the interface, not the properties, and affects the keys used in the key value store for all properties on that interface.  For instance, given the following interface, the ConnectionSting property returns &ldquo;FooConnectionString&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeyPrefixAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[KeyPrefix("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<h2>KeySuffixAttribute</h2>

<p>The third and final attribute we will discuss here is <code>KeySuffixAttribute</code>.  Like <code>KeyPrefixAttribute</code> this is applied to the interface, not the property, and affects the key values for all properties on that interface.  For instance, given the following interface, the <code>ConnectionSting</code> property returns &ldquo;ConnectionStringFoo&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeySuffixAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[Key("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.OnRamp.MVC v3.0 Released]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/highway-dot-onramp-dot-mvc-v3-dot-0-released/"/>
    <updated>2014-01-25T19:27:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/highway-dot-onramp-dot-mvc-v3-dot-0-released</id>
    <content type="html"><![CDATA[<p>We are pleased to announce the release of Highway.OnRamp.MVC v3.0.  The following are the major features now included:</p>

<ul>
<li>Major restructuring to organize and rename a lot of pieces</li>
<li>ApiController dependency injection</li>
<li>Automatic IoC registrations</li>
<li>Session and Configuration access via Interfaces</li>
<li>Easy RESTful ApiControllers</li>
<li>Injectable Filters</li>
<li>Support for Highway.Data v5 (and through it Entity Framework v6)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy RESTful ApiControllers]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/easy-restful-apicontrollers/"/>
    <updated>2014-01-25T19:09:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/easy-restful-apicontrollers</id>
    <content type="html"><![CDATA[<p>Using the Domain concepts and Prebuilt Queries of Highway.Data, we have included a basic RESTful base class for your ApiControllers.  This feature is very easy to use, simply inherit from <code>BaseRestApiController</code>.  That base class has two constructor requirements:</p>

<ol>
<li><code>IDomainRepositoryFactory</code> this class comes from Highway.Data and is already registered with our IoC.</li>
<li><code>RestfulOperations</code> this is a <strong>FLAGS</strong> enumeration that lets you control how the base class behaves.</li>
</ol>


<p>An implementation controller would look like this:</p>

<p>``` csharp
public class DriverController : BaseRestApiController&lt;Domain, Driver, Guid>
{</p>

<pre><code>public DriverController(IDomainRepositoryFactory factory) :
    base(factory, RestfulOperations.All) { }

public override CopyEntityValues(Driver source, Driver destination)
{
    // copy values from one instance to another here.
}
</code></pre>

<p>}
```</p>

<p>This class would support all five of our pre-built functions, because it passed <code>RestfulOperations.All</code>, these are:</p>

<ul>
<li>GetAll &ndash; This is the default get with no <code>id</code> and returns ALL Drivers</li>
<li>GetOne &ndash; This returns one driver, by <code>id</code></li>
<li>Put &ndash; Accepts a <code>PUT</code> verb and updates a singular Driver.  Uses <code>CopyEntityValues</code> above to control what can be updated.</li>
<li>Delete &ndash; Deletes a Driver by <code>id</code></li>
<li>Post &ndash; Accepts a <code>POST</code> verb and inserts a singular Driver.</li>
</ul>


<p>Importantly this enums is <strong>FLAGS</strong> based, and as such the values can be OR'ed together.  For instance, if you wanted to just support GetOne and Post you could change the line above to:</p>

<p>```</p>

<pre><code>public DriverController(IDomainRepositoryFactory factory) :
    base(factory, RestfulOperations.GetOne | RestfulOperations.Post) { }
</code></pre>

<p>```</p>

<p>There are some logical pre-built combinations already supported in the enum, which is defined as follows:</p>

<p>```</p>

<pre><code>    [Flags]
    public enum RestOperations
    {
        GetAll = 1,
        GetOne = 2,
        Post = 4,
        Put = 8,
        Delete = 16,
        ReadOnly = 3,
        WriteOnly = 28,
        All = 31
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I get my DbContext?]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/14/how-do-i-get-my-dbcontext/"/>
    <updated>2013-11-14T11:10:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/14/how-do-i-get-my-dbcontext</id>
    <content type="html"><![CDATA[<p>From time to time it is necessary to either pass a <code>DbContext</code> to some framework code that expects it, or to know the type of your <code>DbContext</code>, for instance when setting a database initializer.  The answer depends slightly on which part of Highway your using, as follows:</p>

<ul>
<li>In Highway.Data.EntityFramework, the <code>DataContext</code> class is a child of <code>DbContext</code>.  As such anywhere you need <code>DbContext</code>, simply pass your instance of <code>IDataContext</code> as <code>DbContext</code>.  This may require a soft cast if your variable is of type <code>IDataContext</code> and not <code>DataContext</code>, which it normally should and will be.</li>
<li>In Highway.OnRamp.MVC.Data we subclass the default <code>DataContext</code> class of Highway.Data.EntityFramework into a class called <code>HighwayDataContext</code> to change the constructor a bit.  As such, the type of of your <code>DbContext</code> is <code>HighwayDataContext</code>, but as above any <code>IDataContext</code> can be cast to <code>DbContext</code> with success.</li>
</ul>

]]></content>
  </entry>
  
</feed>
