<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: data | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/data/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2013-11-14T11:18:07-06:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How do I get my DbContext?]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/14/how-do-i-get-my-dbcontext/"/>
    <updated>2013-11-14T11:10:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/14/how-do-i-get-my-dbcontext</id>
    <content type="html"><![CDATA[<p>From time to time it is necessary to either pass a <code>DbContext</code> to some framework code that expects it, or to know the type of your <code>DbContext</code>, for instance when setting a database initializer.  The answer depends slightly on which part of Highway your using, as follows:</p>

<ul>
<li>In Highway.Data.EntityFramework, the <code>DataContext</code> class is a child of <code>DbContext</code>.  As such anywhere you need <code>DbContext</code>, simply pass your instance of <code>IDataContext</code> as <code>DbContext</code>.  This may require a soft cast if your variable is of type <code>IDataContext</code> and not <code>DataContext</code>, which it normally should and will be.</li>
<li>In Highway.OnRamp.MVC.Data we subclass the default <code>DataContext</code> class of Highway.Data.EntityFramework into a class called <code>HighwayDataContext</code> to change the constructor a bit.  As such, the type of of your <code>DbContext</code> is <code>HighwayDataContext</code>, but as above any <code>IDataContext</code> can be cast to <code>DbContext</code> with success.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does Highway.Data work with Database First?]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/07/does-highway-dot-data-work-with-database-first/"/>
    <updated>2013-11-07T15:32:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/07/does-highway-dot-data-work-with-database-first</id>
    <content type="html"><![CDATA[<h2>Short Answer</h2>

<p>Yes, sort of.</p>

<h2>Long Answer</h2>

<p>Inject-able mappings and context configuration are not offered, for obvious reasons. Otherwise in this version all other features are supported.</p>

<h2>A word about the future</h2>

<p>In future versions of Highway.Data, it is highly likely that features will be introduced that are not compatible with Database First.  How we handle this will be decided later, but this is not a feature which we are committed to fully supporting, it is provided as a <strong>basic</strong> scenario.</p>

<h3>Entity Framework Power Tools</h3>

<p>As a quick word, most people who have chosen Database First, did so because they believed that Code First would require that their classes create, or otherwise control their database.  This is not the case.  <a href="http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d">The Entity Framework team has for some time shipped a set of Power Tools</a> which allow the reverse engineering of existing database into Code First entities and mappings, which are then fully compatible with Highway.Data.  We encourage those currently using Database First to migrate using these tools to a Code First solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What should I register with my IoC container?]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/07/what-should-i-register-with-my-ioc-container/"/>
    <updated>2013-11-07T15:09:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/07/what-should-i-register-with-my-ioc-container</id>
    <content type="html"><![CDATA[<p>If you are going to use an IoC container, regardless of which one, here is what needs to be registered, and some thoughts about object lifetime.  If we do not specify a lifetime, you can assume that singleton is acceptable.</p>

<h2>Highway.Data</h2>

<ul>
<li><code>IRepository</code> should resolve to <code>Repository</code> on either a transient (new every request) or per web request (if you&rsquo;re in a website) object lifetime.</li>
<li><code>IEventManager</code> should resolve to <code>EventManager</code></li>
<li><code>ILog</code> should resolve to either a <a href="http://netcommon.sourceforge.net/">Common.Logging</a> implementation for your chosen logger, or an instance of <code>NoOpLogger</code> from <a href="http://netcommon.sourceforge.net/">Common.Logging</a>.</li>
</ul>


<h2>Highway.Data.EntityFramework</h2>

<ul>
<li><code>IDataContext</code> should resolve to <code>DataContext</code> on either a transient (new every request).

<ul>
<li>Your IoC will need to inject a connection string, named <code>connectionString</code> to the constructor, in whatever way such primitive dependencies are handled by your container.</li>
</ul>
</li>
<li><code>IMappingConfiguration</code> should resolve to a type you have created that implements this interface and maps all of your entities.</li>
<li><code>IContextConfiguration</code> should resolve to <code>DefaultContextConfiguration</code> <strong>or</strong> a class you&rsquo;ve created should you need to change how the Context is configured from our defaults.</li>
</ul>


<h2>Highway.Data.NHibernate</h2>

<ul>
<li><code>IDataContext</code> should resolve to <code>DataContext</code> on either a transient (new every request).</li>
<li><code>ISession</code> should resolve to a call to your configured <code>ISessionFactory</code>.  These are standard NHibernate interfaces, and you should follow their guidance regarding object lifetime.</li>
</ul>


<h2>Highway.Data.RavenDb</h2>

<ul>
<li><code>IDataContext</code> should resolve to <code>DataContext</code> on either a transient (new every request).</li>
<li><code>IDocumentSession</code> should resolve to a call to your configured <code>IDocumentStore</code>.  These are standard RavenDb interfaces, and you should follow their guidance regarding object lifetime.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I fix this 'Reference to type * could not be found' error?]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/06/how-do-i-fix-this-reference-to-type-star-could-not-be-found-error/"/>
    <updated>2013-11-06T07:49:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/06/how-do-i-fix-this-reference-to-type-star-could-not-be-found-error</id>
    <content type="html"><![CDATA[<p>In Highway.Data 4.1  we added strong name keys (SNKs) to all assemblies.  This was a good thing, but bad version number handling and unfortunately can&rsquo;t be fixed now that it&rsquo;s in the wild.  This most often presents itself as an error similar to :</p>

<p><code>
Reference to type 'Highway.Data.IContextConfiguration`1' claims it is defined in 'C:\source\MyProject\packages\Highway.Data.4.0.5.3\lib\net40\Highway.Data.dll', but it could not be found
</code></p>

<p>The particular type that it complains about (<code>IContextConfiguration&lt;T&gt;</code> in this case) may vary case to case, but the combination of a <code>Reference to type * could not be found</code> and that error references a version prior to v4.1 are the signs that you&rsquo;ve encountered this bug.</p>

<h2>Resolution</h2>

<p>Unfortunately, any components that depended on the pre-v4.1 assemblies will need to be recompiled.  Because the SNK was added there is no Assembly Binding Redirect or other solution to this, we suck, and we&rsquo;re sorry.  Rest assured that all future Highway Framework assemblies will be signed from day one and that we&rsquo;ve learned this lesson.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Highway.Data]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/30/configuring-highway-dot-data-for-entity-framework/"/>
    <updated>2013-10-30T20:20:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/30/configuring-highway-dot-data-for-entity-framework</id>
    <content type="html"><![CDATA[<p>If you are using Highway.Data it is probably in conjunction with another underlying technology, so we have broken this guidance into several parts. Please feel free to jump to the part that pertains to you.</p>

<p><a href="#EntityFramework">Entity Framework</a></p>

<p><a href="#NHibernate">NHibernate</a></p>

<p><a href="#RavenDB">RavenDB</a></p>

<p><a name="EntityFramework"></a></p>

<h1>EntityFramework</h1>

<h2>Getting Started</h2>

<p>The first step to getting Highway.Data running on Entity Framework is to install both Entity Framework and Highway.Data.EntityFramework with the below command.</p>

<p><code>plain
Install-Package Highway.Data.EntityFramework
</code></p>

<p>This will bring the install down and put it in our project.</p>

<h1>Example Domain</h1>

<p>In all of the examples below, we&rsquo;ll be working with the following business domain, from our Driver&rsquo;s Education company:</p>

<p>``` csharp
public class Instructor
{</p>

<pre><code>public int Id { get; set; }
public ICollection&lt;Driver&gt; Drivers { get; set; }
</code></pre>

<p>}</p>

<p>public class Driver
{</p>

<pre><code>public int Id { get; set; }
public string FirstName { get; set; }
public string LastName { get; set; }
public Car Car { get; set; }
</code></pre>

<p>}</p>

<p>public class Car
{</p>

<pre><code>public int Id { get; set; }
public string Make { get; set; }
public string Model { get; set; }
public string Year { get; set; }
</code></pre>

<p>}
```</p>

<h2>Database to Entity Mappings</h2>

<p>Now we need to create our database mappings. Highway.Data doesn&rsquo;t redefine the mapping syntax, it just makes them injectable into the <code>DataContext</code>. To do this we defined an interface <code>IMappingConfiguration</code> for you to implement that will allow us to inject your domain into a pre-built <code>DataContext</code>.
<strong>The best practice is to name this class after the aggregate root in your domain, so ours is DriverExams</strong></p>

<p>``` csharp
public class DriversExams : IMappingConfiguration
{</p>

<pre><code>public void ConfigureModelBuilder(DbModelBuilder modelBuilder)
{
    modelBuilder.Entity&lt;Driver&gt;(); //This is the inline/fluent config

    modelBuilder.Configurations.Add(new DriverMap()); //This is the class based config
}
</code></pre>

<p>}</p>

<p>public class DriverMap : EntityTypeConfiguration<Driver>
{</p>

<pre><code>public DriverMap()
{
    this.ToTable("Drivers");
    //You can do anything here that EF supports
}
</code></pre>

<p>}
```</p>

<p>That is all it takes to get our Database schema mapped to our entities. <em>As an aside, EF powertools will reference engineer the <code>EntityTypeConfiguration&lt;T&gt;</code> classes for you, and then you can just add them to your <code>IMappingConfiguration</code></em></p>

<h2>Context Level Configuration</h2>

<p>We setup a <code>DefaultContextConfiguration</code> by default, but if you disagree with our opinions about lazy loading etc.. you can change that. You just need to implement a class for <code>IContextConfiguration</code> like below.</p>

<p>``` csharp
public class DefaultContextConfiguration : IContextConfiguration
{</p>

<pre><code>public void ConfigureContext(DbContext context)
{
    context.Configuration.LazyLoadingEnabled = false;
    context.Configuration.ProxyCreationEnabled = false;
    //Here you can do any context level configuration changes that EF supports
}
</code></pre>

<p>}
```</p>

<p>This will let you change fundemental behavior of the context.</p>

<h2>Logging Configuration</h2>

<p>Then you need to send in a logger, but those details are covered in our <a href="/blog/2013/10/28/logging-with-datacontext/">Logging Post</a> because it is not Entity Framework specific.</p>

<h2>Using it all</h2>

<p>Last but not least we need to use our configured pieces like so:</p>

<p><code>csharp
var context = new DataContext("Your connection string here", new DriversExams(), new DefaultContextConfiguration(), new NoOpLogger());
</code></p>

<p>We normally do this via our favorite IoC Container, but alas that is another guide.</p>

<p><a name="NHibernate"></a></p>

<h1>NHibernate</h1>

<p>Highway.Data is very easy to configure with NHibernate, because we take in an ISession on Constructor for <code>DataContext</code>.</p>

<h2>Getting Started</h2>

<p>The first step to getting Highway.Data running on NHibernate is to install both NHibernate and Highway.Data with the below command.</p>

<p><code>plain
Install-Package Highway.Data.NHibernate
</code></p>

<p>This will bring the install down and put it in our project.</p>

<p>Everything else is out of the box NHibernate, isn&rsquo;t it great!!</p>

<h2>Example</h2>

<p>```csharp
var nhibernateConfiguration = new Configuration().Configure();</p>

<p>var model = AutoMap.AssemblyOf<Driver>()</p>

<pre><code>.Where(type =&gt; typeof (Driver).IsAssignableFrom(type))
.Conventions.AddFromAssemblyOf&lt;Driver&gt;()
.UseOverridesFromAssemblyOf&lt;Driver&gt;();
</code></pre>

<p>var factory = Fluently.Configure(nhibernateConfiguration).Mappings(mappingConfiguration => mappingConfiguration.AutoMappings.Add(model)).BuildSessionFactory();</p>

<p>var context = new DataContext(factory.OpenSession());</p>

<p>```</p>

<p><a name="RavenDB"></a></p>

<h1>RavenDB</h1>

<p>Highway.Data is very easy to configure with RavenDB, because we take in an <code>IDocumentSession</code> on Constructor for <code>DataContext</code>.</p>

<h2>Getting Started</h2>

<p>The first step to getting Highway.Data running on RavenDB is to install both RavenDB and Highway.Data with the below command.</p>

<p><code>plain
Install-Package Highway.Data.RavenDb
</code></p>

<p>This will bring the install down and put it in our project.</p>

<p>Everything else is out of the box RavenDB, isn&rsquo;t it great!!</p>

<h2>Example</h2>

<p>```csharp
var embeddableDocumentStore = new EmbeddableDocumentStore()
{</p>

<pre><code>DataDirectory = "",
RunInMemory = true
</code></pre>

<p>};
embeddableDocumentStore.Initialize();</p>

<p>var context = new DataContext(embeddableDocumentStore.OpenSession());</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
