<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hp | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/hp/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2014-03-10T10:52:39-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Highway.Data v5.0.5 Released]]></title>
    <link href="http://hwyfwk.com/blog/2014/03/10/highway-dot-data-v5-dot-0-5-released/"/>
    <updated>2014-03-10T10:47:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2014/03/10/highway-dot-data-v5-dot-0-5-released</id>
    <content type="html"><![CDATA[<p>This release is brought to you by two new contributors, Eric Burcham and Long Mai!  Thank you gentlemen for your support.</p>

<ul>
<li>Bug Fix : <a href="https://github.com/HighwayFramework/Highway.Data/pull/52">Support adding element directly and indirectly to InMemoryDataContext.</a></li>
<li>Bug Fix : <a href="https://github.com/HighwayFramework/Highway.Data/pull/51">Improved documentation for IDomainRepositoryFactory</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.OnRamp.MVC v3.0 Released]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/highway-dot-onramp-dot-mvc-v3-dot-0-released/"/>
    <updated>2014-01-25T19:27:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/highway-dot-onramp-dot-mvc-v3-dot-0-released</id>
    <content type="html"><![CDATA[<p>We are pleased to announce the release of Highway.OnRamp.MVC v3.0.  The following are the major features now included:</p>

<ul>
<li>Major restructuring to organize and rename a lot of pieces</li>
<li>ApiController dependency injection</li>
<li>Automatic IoC registrations</li>
<li>Session and Configuration access via Interfaces</li>
<li>Easy RESTful ApiControllers</li>
<li>Injectable Filters</li>
<li>Support for Highway.Data v5 (and through it Entity Framework v6)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.Data v5.0 Released]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/highway-dot-data-v5-dot-0-released/"/>
    <updated>2014-01-25T16:40:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/highway-dot-data-v5-dot-0-released</id>
    <content type="html"><![CDATA[<h1>Highway.Data 5.0 Released ( 5.0.1.0 )</h1>

<h2>New Features, and better Domain Driven Design support</h2>

<h3>Domain Context</h3>

<p>We have added support for advanced domain specific contexts. These allow for detailed manipulation of your data access patterns. It adheres to the Domain Driven version of a bounded context.</p>

<h4>More Details are here: <a href="/blog/2014/01/25/domain-context/">Domain Context</a></h4>

<h3>Simplified Creation Pattern</h3>

<p>We have also added the much requested <code>Repository</code> factories. These give you the ability to use Highway.Data in services and long living work-flows without having to hand roll your own management of unit of work.</p>

<h4>More Details are here: <a href="/blog/2014/01/25/simplified-creation-patterns/">Creation Patterns</a></h4>

<h3>Entity Framework 6.0.0.2 Support</h3>

<p>We shipped an EF 6.0 supported version now that some of the initial release bugs have been patch. We did require the 6.0.0.2 version so that we could make sure you get their fixes as well.</p>

<p>We will be working over the next 3-4 weeks to support some of the new features ( that we don&rsquo;t already support) in Entity Framework 6.0.</p>

<h4>More Details are here:  <a href="http://msdn.microsoft.com/en-us/data/ee712907#ef6">EF 6.0</a></h4>

<h2>Breaking Changes:</h2>

<h3>AsQueryable off Repository.Context</h3>

<p>After seeing a lot of examples from clients, friends, and other speakers using <code>repository.Context.AsQueryable()</code>, we realized that this represented a large hole in the design pattern for Query Object separation. We have remove that hole this publish. If you were using this for simple operations please look at the pre-built queries, or codify the queries into <code>Query&lt;T&gt;, Scalar&lt;T&gt;, Command&lt;T&gt;</code> objects.</p>

<h3>Interception</h3>

<p>We have disabled event interception for the simple <code>DataContext</code> as it caused an additional understanding and performance overhead. This is in an effort make sure we have a simple entry story for most developers. If you were using this feature, we have good news. We have expanded the feature with pre/post <code>Command</code>, <code>Scalar</code>, and <code>Query</code> execution intercept points, as well as kept the standard pre/post save. These features have moved onto the <code>DomainContext&lt;T&gt;</code> class due to their advanced nature.</p>

<h4>More Details are here:</h4>

<h2>Thanks to:</h2>

<h4>Curtis Schlak for pushing us to get EF 6.0 support published.</h4>

<h4>Michael Dudley for the design sessions on vacation in Las Vegas, and the push to finish the beta release.</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.RoadCrew v0.1]]></title>
    <link href="http://hwyfwk.com/blog/2013/12/16/highway-dot-roadcrew-v0-dot-1/"/>
    <updated>2013-12-16T08:26:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/12/16/highway-dot-roadcrew-v0-dot-1</id>
    <content type="html"><![CDATA[<p>We&rsquo;re thrilled to announce the initial release of Highway.RoadCrew.  This is a package installer, very similar to <code>bundler</code> from the Ruby world, but built on top of the amazing Chocolatey package manager, and PsGet PowerShell Module directory.  To get started, this is all you need to know:</p>

<h1>Install</h1>

<p>First, run the following two lines, which will download the current script, and run it.</p>

<p><code>
(new-object Net.WebClient).DownloadString("http://bit.ly/hwyfwk-rc") &gt; RunMe.ps1
.\RunMe.ps1
</code></p>

<h1>Configure</h1>

<p>Now setup your configuration by editing the <code>RunMe.config.ps1</code> file.  This will always be the file you edit, you shouldn&rsquo;t ever need to modify <code>RunMe.ps1</code>.  The following commands are supported:</p>

<ul>
<li><code>chocolatey &lt;package-name&gt;</code> will install the named package (see <a href="http://chocolatey.org/">http://chocolatey.org/</a> for a list)

<ul>
<li><code>-source</code> is an optional switch that lets you specify another chocolatey feed or source</li>
</ul>
</li>
<li><code>gem &lt;gem-name&gt;</code> will install a Ruby gem (see <a href="http://rubygems.org/">http://rubygems.org/</a> for a list)</li>
<li><code>windows &lt;feature-name&gt;</code> will install the named feature (execute <code>clist -source windowsfeatures</code> to see a possible list, only available after you&rsquo;ve executed <code>RunMe.ps1</code> a second time currently)</li>
<li><code>profile &lt;powershell-command&gt;</code> adds the listed PowerShell command to the current user&rsquo;s current profile.</li>
<li><code>alias &lt;alias-name&gt; &lt;command&gt;</code> adds an alias to the current user&rsquo;s current PowerShell profile.</li>
<li><code>psget &lt;module-name&gt;</code> will install a PsGet.net PowerShell module (see <a href="http://psget.net/">http://psget.net/</a> for a list)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roadmaps]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/19/roadmaps/"/>
    <updated>2013-10-19T08:38:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/19/roadmaps</id>
    <content type="html"><![CDATA[<p>Below is the current road map for the Highway Framework. All of these are subject to change, but we want to be as transparent as possible in planning so that we can gather input from the community. Any project not in the list is considered stable and not in need of changes in the next 6 months.</p>

<!-- MORE -->


<h1>Highway.Data</h1>

<h2>vNext &ndash; Time line &ndash; Q4 2013</h2>

<ul>
<li>By end of the year all features release to have written tutorials, and the API to have updated documentation</li>
<li>By end of the year EF 6.0 major features that need additional work in the framework will be supported and documented</li>
</ul>


<h2>vNext + 1 &ndash; Time line &ndash; Q1 2014</h2>

<ul>
<li>Context and Repository will have factories for creation that control lifetime of the objects</li>
<li>Projection based Scalars &ndash; Scalars will be converted to projection based to allow for SQL output,</li>
<li>Documentation &ndash; Video Tutorials for 80% features</li>
</ul>


<h1>Highway.Insurance</h1>

<h2>vNext &ndash; Time line &ndash; Q4 2013</h2>

<ul>
<li>By end of the year all features release to have written tutorials, and the API to have updated documentation</li>
<li>Version Support for VS 2013 APIs</li>
</ul>


<h2>vNext + 1 &ndash; Time line &ndash; Q1 2014</h2>

<ul>
<li>Video Tutorials for 80% features</li>
</ul>


<h1>Highway.Pavement</h1>

<h2>vNext &ndash; Time line &ndash; Q4 2013</h2>

<ul>
<li>By end of the year all features release to have written tutorials, and the API to have updated documentation</li>
</ul>


<h1>Highway.MVC &ndash; New Project</h1>

<h2>vFirst &ndash; Time line &ndash; Q4 2013</h2>

<ul>
<li>Package a set of classes that allow for MVVM Model hydration to Knockout or Angular by default from MVC Model</li>
<li>All feature documentation and usage video tutorials</li>
</ul>


<h1>Highway.OnRamp.MVC.MVVM &ndash; New Project</h1>

<h2>vFirst &ndash; Time line &ndash; Q4 2013</h2>

<ul>
<li>OnRamp to drop MVVM wire up and folder structure into any MVC project &ndash; Even Existing</li>
<li>Video to walk through basic structure</li>
</ul>


<h1>Highway.OnRamp.MVC</h1>

<h2>vNext &ndash; Timeline &ndash; Q4 2013</h2>

<ul>
<li>Documentation of all current features (70%+ complete already)</li>
<li>Reorganize solution structure to move most inserted classes into an App_Infrastructure folder</li>
<li>Introduce default conventions for &ldquo;Post<em>&rdquo; and &ldquo;Get</em>&rdquo; actions to be limited to HttpPost and HttpGet respectively via Filter injection.</li>
</ul>


<h1>Highway.RoadCrew</h1>

<h2>vFirst</h2>

<ul>
<li>Implement all currently listed stories/issues to establish a great foundation</li>
<li>Document all those features on the website, as completed.</li>
</ul>

]]></content>
  </entry>
  
</feed>
