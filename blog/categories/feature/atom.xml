<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: feature | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/feature/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2013-10-19T12:25:53-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding the Patterns]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/19/understanding-the-patterns/"/>
    <updated>2013-10-19T10:40:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/19/understanding-the-patterns</id>
    <content type="html"><![CDATA[<h1>Patterns</h1>

<p>Highway.Data is based on a blended use of <strong>3 major patterns</strong>, and to understand the intent of the Queries / Commands / Scalars that make highway smooth, we must first talk about the patterns.</p>

<p>There are a lot of places where you can find the academic explanation of these patterns, but here we are going to focus on the outcomes we are using it for. If you would like to read more about these, check out the <a href="#furtherReading">Further Reading</a> below.</p>

<h2>Repository</h2>

<p>Repository is a way to abstract the &ldquo;guts&rdquo; of the data access and persistence knowledge away from my logic. This is a lot of the time misused. Typed Repositories, Repositories with more than 5 methods, repositories that manage their own statefulness are all examples of a good pattern meeting a bad implementation. We use Repository in combination with Unit of Work and a modern interpretation of Query Object pattern.</p>

<h3>Signs of a well built Repository</h3>

<ul>
<li>The user of the repository ask for data, but no information about the persistence is leaked to the caller.</li>
<li>It is not specific to any domain, and can be portable</li>
<li>It has state, but doesn&rsquo;t manage it</li>
<li>It has no control of the Update/Add/Delete side of the operations, but gives access to that API. Repositories are meant as an abstraction for reading data.</li>
</ul>


<h2>Unit Of Work</h2>

<p>Unit of Work allows us to track in memory changes of an object that are made in series and then commit those changes to some persistence layer. This is an atomic unit of work that is transaction during the commit but in our code is just changes to objects.</p>

<h3>Signs of a well built unit of work</h3>

<ul>
<li>Commit-able</li>
<li>Abandon/Rollback-able</li>
<li>Not specific to any one API</li>
<li>Give the basic Add/Remove/Update functionality</li>
<li>Are not query-able</li>
</ul>


<h2>Query Object</h2>

<p>Query Object is a way of encapsulating the details of a single query into an object that can be reused without being stateful. This helps us avoid duplication in the code base and we can codify and test our queries.</p>

<h3>Signs of a well built query object</h3>

<ul>
<li>It doesn&rsquo;t manager state outside a single execution</li>
<li>It is reuse-able</li>
<li>It is able to be functionally tested</li>
<li>It is able to be performance tested</li>
<li>It can output it&rsquo;s persistence query ( SQL statement for example )</li>
<li>If it returns multiple rows, it can have pagination applied without modification</li>
</ul>


<p><a name="furtherReading"></a></p>

<h2>Further Reading</h2>

<p>We hold our opinions because of years of software development on all sizes of projects, but understand that many opinions exist that are valid. In an effort to present the information as impartially as possible below does include links to content that disagrees with our opinions. Please read on and form your own opinions.</p>

<h3>Repository</h3>

<p><a href="http://www.martinfowler.com/eaaCatalog/repository.html">Martin Fowler Repository Pattern</a></p>

<p><a href="http://weblogs.asp.net/fredriknormen/archive/2008/04/24/what-purpose-does-the-repository-pattern-have.aspx">Fredik Norm√©n Repository Pattern Purpose Discussion</a></p>

<p><a href="http://msdn.microsoft.com/en-us/library/ff649690.aspx">MSDN Repository Article</a></p>

<p><a href="http://ayende.com/blog/4784/architecting-in-the-pit-of-doom-the-evils-of-the-repository-abstraction-layer">Ayende@Rahien Repository Pit Of Doom</a></p>

<p><a href="http://www.devlinliles.com/post/I-disagree-with-the-pit-of-Doom">Devlin Liles Discussion of the Pit Of Doom</a></p>

<h3>Unit of Work</h3>

<p><a href="http://www.martinfowler.com/eaaCatalog/unitOfWork.html">Martin Fowler Unit of Work</a></p>

<p><a href="http://msdn.microsoft.com/en-us/magazine/dd882510.aspx">Jeremy Miller Unit of Work and Persistence Ignorance</a></p>

<p><a href="http://rlacovara.blogspot.com/2009/04/entity-framework-patterns-unit-of-work.html">Ruby Lacovara Entity Framework Patterns Unit of Work</a></p>

<h3>Query Object</h3>

<p><a href="http://martinfowler.com/eaaCatalog/queryObject.html">Martin Fowler Query Object</a></p>

<p><a href="http://coderkarl.wordpress.com/2012/05/02/the-query-object-pattern-2/">Karl Nilsson Query Object Pattern</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queries / Commands / Scalars]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/19/queries-slash-commands-slash-scalars/"/>
    <updated>2013-10-19T09:21:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/19/queries-slash-commands-slash-scalars</id>
    <content type="html"><![CDATA[<h1>Using Queries, Commands and Scalars</h1>

<p>The basis for separating concerns in Highway.Data is that the query object itself is the smallest level of data access and can be used to encapsulate the concerns of the &ldquo;How we get data&rdquo; from the &ldquo;What data do I get&rdquo;. In this post will we be diving into the reasoning, implementation, and usage of the different types of Query Objects included with Highway.Data.</p>

<ul>
<li><a href="/blog/2013/10/19/understanding-the-patterns/">Patterns</a></li>
<li><a href="#query">Query</a></li>
<li><a href="#command">Command</a></li>
<li><a href="#scalar">Scalar</a></li>
</ul>


<p><a name="query"></a></p>

<h1>Queries</h1>

<h2>Implementation</h2>

<p>Lets take a look at the definition of out basic Query interface
``` csharp
public interface IQuery<out T> : IQueryBase
{</p>

<pre><code>IEnumerable&lt;T&gt; Execute(IDataContext context);
</code></pre>

<p>}
<code>``
Execute is the function that our</code>Repository` will use to execute the query, and it will hand it the context to execute upon. This allows us to create queries without external dependencies, but also allows us to add additional behavior by creating our own context without breaking our queries.</p>

<h3>IEnumerable<T> Vs IQueryable<T></h3>

<p>Notice how the Execution of the query returns an <code>IEnumerable</code> instead of an <code>IQueryable</code>. This is to basically &ldquo;seal&rdquo; the SQL so that additional operations happen in memory. The horrors of lazy loading and LINQ allow us, as developers without realizing it, to load tremendous amounts of data into memory. We have taken steps to make sure that is an intentional choice rather than an unintended consequence.</p>

<h2>Usage</h2>

<p>The basic query selects a collection of objects that you tell it to as one operation. If we need to get drivers by last name, consider the following classes and tests.</p>

<h3>Classes Involved</h3>

<p>```
public class Driver { public string LastName { get; set; } }</p>

<p>public class DriversByLastName : Query<Driver>
{</p>

<pre><code>public DriversByLastName(string lastName)
{
    ContextQuery = context =&gt; context.AsQueryable&lt;Driver&gt;().Where(e =&gt; e.LastName == lastName);
}
</code></pre>

<p>}
<code>``
Notice how we inherit from the</code>Query<Driver><code>class. This class has most of the base logic for deferred execution and gives us an easy way to define queries. The type parameter of Driver tells us what the query will return. In one line we assign the</code>ContextQuery`, which is just a delegate to get called when we need the results.</p>

<h3>Tests</h3>

<p>For these tests we are using the <code>InMemoryDataContext</code> that ships with Highway.Data as a testable stub.</p>

<p>```
[TestMethod]
public void ShouldGetDriversByLastName()
{</p>

<pre><code>//Arrange
var context = new InMemoryDataContext();
context.Add(new Driver(){ LastName = "Liles" });
context.Add(new Driver(){ LastName = "Rayburn" });

var query = new DriversByLastName("Liles");

//Act
var results = query.Execute(context); 

//Assert
Assert.AreEqual(1, results.Count());
Assert.AreEqual("Liles",results.Single().LastName);
</code></pre>

<p>}
```</p>

<h3>Example Usage with repository</h3>

<p><code>
IEnumerable&lt;Driver&gt; = repository.Find(new DriversByLastName("Liles"));
</code></p>

<p><a name="command"></a></p>

<h1>Command</h1>

<h2>Implementation</h2>

<p>Lets take a look at the definition of out basic Command Interface
``` csharp
public interface ICommand
{</p>

<pre><code>void Execute(IDataContext context);
</code></pre>

<p>}
```
Execute is the function that our Repository will use to execute the command, and it will hand it the context to execute upon. This allows us to create commands without external dependencies, but also allows us to add additional behavior by creating our own context without breaking our commands.</p>

<h2>Usage</h2>

<p>The basic command allows us to fire off a set of operations without a return against our persistence store. This command could be updates, deletes, or even firing SQL Jobs. Lets consider the classes and tests involved</p>

<h3>Classes Involved</h3>

<p>```
public class Driver
{</p>

<pre><code>public int Score { get; set; }
public string LastName { get; set; } 
</code></pre>

<p>}</p>

<p>public class SetDriverScoreByLastName : Command
{</p>

<pre><code>public SetDriverScoreByLastName(string lastName, int score)
{
    ContextQuery = context =&gt; 
    {
        var drivers = context.AsQueryable&lt;Driver&gt;().Where(e =&gt; e.LastName == lastName);
        foreach(var driver in drivers)
        {
            driver.Score = score;
        }
        context.Commit();
    }
}
</code></pre>

<p>}
<code>``
Notice how we inherit from the</code>Command<code>class. This class has most of the base logic for deferred execution and gives us an easy way to define commands. We can set the</code>ContextQuery` to be a multiple line delegate like above, or a single operation.</p>

<blockquote><h3><strong><em>Commands are not deferred, they execute immediately</em></strong></h3></blockquote>

<h3>Tests</h3>

<p>For these tests we are using the <code>InMemoryDataContext</code> that ships with Highway.Data as a testable stub.</p>

<p>```
[TestMethod]
public void ShouldSetScoresByLastName()
{</p>

<pre><code>//Arrange
var context = new InMemoryDataContext();
context.Add(new Driver(){ LastName = "Liles" });
context.Add(new Driver(){ LastName = "Rayburn" });

var command = new SetDriverScoreByLastName("Liles", 100);

//Act
command.Execute(context); 

//Assert
var result = context.AsQueryable&lt;Driver&gt;().Single(x =&gt; x.LastName == "Liles"); 
Assert.AreEqual("Liles", results.LastName);
Assert.AreEqual(100, results.Score);
</code></pre>

<p>}
```</p>

<h3>Example Usage with repository</h3>

<p><code>
repository.Execute(new SetDriverScoreByLastName("Liles", 100));
</code></p>

<p><a name="scalar"></a></p>

<h1>Scalar</h1>

<h2>Implementation</h2>

<p>Lets take a look at the definition of out basic Scalar interface
``` csharp
public interface IScalar<out T>
{</p>

<pre><code>T Execute(IDataContext context);
</code></pre>

<p>}
```</p>

<h2>Usage</h2>

<p>The basic scalar selects a single object that you tell it to as one operation. If we need to get a driver by last name, consider the following classes and tests. we can also return out non entity types such as a count of drivers by score;</p>

<h3>Classes Involved</h3>

<p>```
public class Driver
{</p>

<pre><code>public int Score { get; set; }
public string LastName { get; set; } 
</code></pre>

<p>}</p>

<p>public class FirstDriverByLastName : Scalar<Driver>
{</p>

<pre><code>public FirstDriverByLastName(string lastName)
{
    ContextQuery = context =&gt; context.AsQueryable&lt;Driver&gt;().FirstOrDefault(e =&gt; e.LastName == lastName);
}
</code></pre>

<p>}</p>

<p>public class PassingDrivers : Scalar<int>
{</p>

<pre><code>public PassingDrivers()
{
    ContextQuery = context =&gt; context.AsQueryable&lt;Driver&gt;().Count(x =&gt; x.Score &gt; 75);
}
</code></pre>

<p>}
<code>``
Notice how we inherit from the</code>Scalar<Driver><code>or</code>Scalar<int>` class. The type parameter defines the type we are returning with the scalar, and the base class gives us all the logic to execute and log the information about the execution.</p>

<blockquote><h3><strong><em>Scalars are not deferred, they execute immediately</em></strong></h3></blockquote>

<h3>Tests</h3>

<p>For these tests we are using the <code>InMemoryDataContext</code> that ships with Highway.Data as a testable stub.</p>

<p>```
[TestMethod]
public void ShouldGetFirstDriverByLastName()
{</p>

<pre><code>//Arrange
var context = new InMemoryDataContext();
context.Add(new Driver(){ LastName = "Liles" });
context.Add(new Driver(){ LastName = "Rayburn" });

var query = new FirstDriverByLastName("Liles");

//Act
var result = query.Execute(context); 

//Assert
Assert.AreEqual("Liles",result.LastName);
</code></pre>

<p>}</p>

<p>[TestMethod]
public void ShouldGetCountOfPassingDrivers()
{</p>

<pre><code>//Arrange
var context = new InMemoryDataContext();
context.Add(new Driver(){ LastName = "Liles", Score = 50 });
context.Add(new Driver(){ LastName = "Rayburn", Score = 100 });

var query = new PassingDrivers();

//Act
var result = query.Execute(context); 

//Assert
Assert.AreEqual(1,result);
</code></pre>

<p>}
```</p>

<h3>Example Usage with repository</h3>

<p><code>
Driver driver = repository.Find(new DriverByLastName("Liles"));
int passingDrivers = repository.Find(new PassingDrivers());
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/19/repository/"/>
    <updated>2013-10-19T08:17:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/19/repository</id>
    <content type="html"><![CDATA[<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>In Highway.Data, we define our <code>IRepository</code> interface as follows:</p>

<p>``` csharp</p>

<pre><code>public interface IRepository
{
    IDataContext Context { get; }
    IEventManager EventManager { get; }

    IEnumerable&lt;T&gt; Find&lt;T&gt;(IQuery&lt;T&gt; query);
    T Find&lt;T&gt;(IScalar&lt;T&gt; query);
    void Execute(ICommand command);
}
</code></pre>

<p>```</p>

<p>The interface first has two properties, those being <code>Context</code> and <code>EventManager</code>.  The details of those are covered elsewhere, though we will touch lightly on <code>Context</code> in this article.  The other three methods are very interesting, and each deserve a section of their own.</p>

<h1>Example Domain</h1>

<p>In all of the examples below, we&rsquo;ll be working with the following business domain, from our Driver&rsquo;s Education company:</p>

<p>```
public class Instructor
{</p>

<pre><code>public int Id { get; set; }
public ICollection&lt;Driver&gt; Drivers { get; set; }
</code></pre>

<p>}</p>

<p>public class Driver
{</p>

<pre><code>public int Id { get; set; }
public string FirstName { get; set; }
public string LastName { get; set; }
public Car Car { get; set; }
</code></pre>

<p>}</p>

<p>public class Car
{</p>

<pre><code>public int Id { get; set; }
public string Make { get; set; }
public string Model { get; set; }
public string Year { get; set; }
</code></pre>

<p>}
```</p>

<h1>Find Multiple Things &ndash; IEnumerable&lt;T&gt; Find&lt;T&gt;(IQuery&lt;T&gt; query)</h1>

<p>This method is used when you want to retrieve multiple things from the database.  Let&rsquo;s assume we had a MVC controller which wanted to query for all drivers who had taken a class from Instructor #5.  First thing we&rsquo;ll need is a controller which has a dependency of our <code>IRepository</code> interface.</p>

<p>```
public class DriversController : Controller
{</p>

<pre><code>private IRepository repo;

public DriversController(IRepository repo)
{
    this.repo = repo;
}
</code></pre>

<p>}
```</p>

<p>Now then, we&rsquo;ll add an action method to this controller, which is called <code>ByInstructor</code> which takes an <code>int</code> of the Instructor&rsquo;s <code>Id</code>.  Then we call to the repository, passing in an instance of our Query object called <code>FindDriversByInstructorId</code>.  Like so:</p>

<p>```
public class DriversController : Controller
{</p>

<pre><code>private IRepository repo;

public DriversController(IRepository repo)
{
    this.repo = repo;
}

public ActionResult ByInstructor(int instructorId)
{
    IEnumerable&lt;Driver&gt; drivers = repo.Find(new FindDriversByInstructorId(instructorId));
    return View(drivers);
}
</code></pre>

<p>}
```</p>

<p>Note how our <code>DriversController</code> is not aware of anything database specific, like connection strings, or even which Object Relational Mapper (ORM) is servicing the request.  All it knows is that it is asking for multiple drivers, and receiving them.  Now, you might be curious what&rsquo;s going on inside of <code>FindDriversByInstructorId</code>, and while we&rsquo;re not discussing queries here, I want to show you the code so you don&rsquo;t think there is magic going on:</p>

<p>```
public class FindDriversByInstructorId : Query<Driver>
{</p>

<pre><code>public FindDriversByInstructorId(int instructorId)
{
    ContextQuery = c =&gt; c.AsQueryable&lt;Instructor&gt;().SelectMany(e =&gt; e.Drivers);
}
</code></pre>

<p>}
```</p>

<h1>Find One Thing &ndash; T Find&lt;T&gt;(IScalar&lt;T&gt; query)</h1>

<p>Our next method is used when we want to retrieve a singular thing from the database.  That one thing might be an <code>int</code>, for instance a count of rows, or it might be an entity like <code>Car</code>, for instance getting the car for a particular driver.  This time we&rsquo;ll be working with the <code>CarController</code>, and we&rsquo;re going to retrieve a <code>Car</code> by it&rsquo;s <code>Driver</code>&rsquo;s <code>Id</code>.  Our controller would use <code>IRepository</code> like so:</p>

<p>```
public class CarController : Controller
{</p>

<pre><code>private IRepository repo;

public CarController(IRepository repo)
{
    this.repo = repo;
}

public ActionResult ByDriver(int driverId)
{
    Car car = repo.Find(new FindCarByDriverId(driverId));
    return View(car);
}
</code></pre>

<p>}
```</p>

<p>As you can see, we return a singular object, once again completely unaware of which ORM is doing the work, or anything related to the database.  Like before, while we&rsquo;re not discussing Scalars here, this is the query being used :</p>

<p>```
public class FindCarByDriverId : Scalar<Car>
{</p>

<pre><code>public FindCarByDriverId(int driverId)
{
    ContextQuery = c =&gt; c.AsQueryable&lt;Driver&gt;()
        .Where(e =&gt; e.Id == driverId)
        .Select(e =&gt; e.Car)
        .FirstOrDefault();
}
</code></pre>

<p>}
```</p>

<h1>Do Something &ndash; void Execute(ICommand command)</h1>

<p>Our final method is used to perform a command that has no return value.  There are often times when you want the database to do some work, but you don&rsquo;t need it to return anything as a result of that work, this is what <code>Execute</code> is for.  In our example, we&rsquo;re going to add another method to our <code>CarController</code> class from the previous example, which will remove all Chevy vehicles from our database.  Our <code>CarController</code> will now look like this:</p>

<p>```
public class CarController : Controller
{</p>

<pre><code>private IRepository repo;

public CarController(IRepository repo)
{
    this.repo = repo;
}

public ActionResult ByDriver(int driverId)
{
    Car car = repo.Find(new FindCarByDriverId(driverId));
    return View(car);
}

public ActionResult RemoveChevy()
{
    repo.Execute(new DropMake("Chevy"));
    return RedirectToAction("Index", "Home");
}
</code></pre>

<p>}
```</p>

<p>Note how <code>Execute</code> returns no value.  Our <code>DropMake</code> command looks like this :</p>

<p>```
public class DropMake : Command
{</p>

<pre><code>public DropMake(string make)
{
    // THIS IS A REALLY BAD WAY TO REMOVE MULTIPLE ROWS
    // IT WOULD NORMALLY BE MUCH BETTER TO USE AN
    // AdvancedCommand TO PERFORM THIS TYPE OF OPERATION
    ContextQuery = c =&gt;
    {
        var cars = c.AsQueryable&lt;Car&gt;().Where(car =&gt; car.Make == make);
        foreach (var car in cars)
        {
            c.Remove(car);
        }
    };
}
</code></pre>

<p>}
```</p>

<p>As the comment says, this is an inefficient way to remove multiple rows, please review the documentation on <code>AdvancedCommand</code> if you really need to perform a delete like this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework - Testable Adapter for DbContext]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/15/entity-framework-testable-adapter-for-dbcontext/"/>
    <updated>2013-10-15T12:58:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/15/entity-framework-testable-adapter-for-dbcontext</id>
    <content type="html"><![CDATA[<h1>Installing Highway.Data.EntityFramework</h1>

<p>Our first and most important feature of Highway.Data.EntityFramework is wrapping the Highway.Data <code>IDataContext</code> interface around the <code>DbContext</code> of Entity Framework.  You get started with Highway.Data.EntityFramework by simply opening the Package Manager Console and typeing:</p>

<p><code>powershell
Install-Package Highway.Data.EntityFramework
</code></p>

<p>This will bring in Entity Framework, Highway.Data, Highway.Pavement, and some common wrappers around Logging and Service location.</p>

<h1>Introducing the IDataContext</h1>

<p>Now, let&rsquo;s create a variable of type <code>IDataContext</code> and provide it an instance of the class <code>DataContext</code>, like so:</p>

<p><code>csharp
IDataContext context = new DataContext("server=.;database=master;integrated security=true;");
</code></p>

<p>Note, we provide our connection string to the <code>DataContext</code> class when it is instantiated.  Let&rsquo;s look at the definition of <code>IDataContext</code>:</p>

<p>```
public interface IDataContext : IDisposable
{</p>

<pre><code>IEventManager EventManager { get; set; }

T Add&lt;T&gt;(T item) where T : class;
IQueryable&lt;T&gt; AsQueryable&lt;T&gt;() where T : class;
int Commit();
T Reload&lt;T&gt;(T item) where T : class;
T Remove&lt;T&gt;(T item) where T : class;
T Update&lt;T&gt;(T item) where T : class;
</code></pre>

<p>}
```</p>

<p>The interface provides a way to do all of the CRUD operations:</p>

<ul>
<li><strong>C</strong>reate &ndash; <code>Add&lt;T&gt;(T item)</code></li>
<li><strong>R</strong>ead &ndash; <code>AsQueryable&lt;T&gt;()</code></li>
<li><strong>U</strong>pdate &ndash; <code>Update&lt;T&gt;(T item)</code></li>
<li><strong>D</strong>elete &ndash; <code>Remove&lt;T&gt;(T item)</code></li>
</ul>


<p>In addition we&rsquo;ve provided a way to do two other important things:</p>

<ul>
<li>Refresh an object from the Database via <code>Reload&lt;T&gt;(T item)</code></li>
<li>Commit all work as a single transaction via <code>Commit()</code></li>
</ul>


<h2>DbContext and Entity Framework</h2>

<p>Inside the Highway.Data.EntityFramework version of <code>DataContext</code>, it is worth of note that our <code>DataContext</code> class <strong>is</strong> an instance of <code>DbContext</code>.  Our declaration looks like so:</p>

<p><code>
public class DataContext : DbContext, IEntityDataContext, IObservableDataContext, IDataContext, IDisposable
</code>
Anytime you have existing code which requires a DbContext, you can instead provide an instance of the DataContext class.</p>

<h1>Testing with DataContext</h1>

<p>From a testing perspective this provides great abstractions.  Consider the following classes and test:</p>

<p>```
public class Driver { public string Name { get; set; } }</p>

<p>public class DriverEducationService
{</p>

<pre><code>private IDataContext context;
public DriverEducationService(IDataContext context)
{
    this.context = context;
}

public Driver GetDriver(string name)
{
    return context.AsQueryable&lt;Driver&gt;().First(e =&gt; e.Name == name);
}
</code></pre>

<p>}
```</p>

<p>A simple class that retrieves driver by name. <strong>Please note, we are discussing only <code>IDataContext</code> here, we normally recommend querying via <code>IRepository</code> in Highway.Data</strong></p>

<p>Now let&rsquo;s write a test that ensures that works, without having to touch a database:</p>

<p>```
[TestClass]
public class DriverEducationServiceTests
{</p>

<pre><code>[TestMethod]
public void GetDriver_ShouldRetrieveADriverByName()
{
    // Arrange
    var context = new InMemoryDataContext();
    context.Add(new Driver { Name = "Devlin Liles" });
    var target = new DriverEducationService(context);

    // Act
    var driver = target.GetDriver("Devlin Liles");

    // Assert
    Assert.AreEqual("Devlin Liles", driver.Name);
}
</code></pre>

<p>}
```</p>

<p>Now, this test doesn&rsquo;t use mocking because we provide an <code>InMemoryDataContext</code> with Highway.Data which removes the need for it in most cases.  But when it doesn&rsquo;t remove that need, we can also re-write the same test using a mocking framework like Rhino.Mocks very simply:</p>

<p>```
[TestClass]
public class DriverEducationServiceTests_WithMocking
{</p>

<pre><code>[TestMethod]
public void GetDriver_ShouldRetrieveADriverByName()
{
    // Arrange
    var context = MockRepository.GenerateMock&lt;IDataContext&gt;();
    context.Expect(e =&gt; e.AsQueryable&lt;Driver&gt;())
        .Return(new List&lt;Driver&gt; 
        { 
            new Driver { Name = "Devlin Liles" } 
        }.AsQueryable());
    var target = new DriverEducationService(context);

    // Act
    var driver = target.GetDriver("Devlin Liles");

    // Assert
    Assert.AreEqual("Devlin Liles", driver.Name);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVC Filters with Dependency Injection]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/06/mvc-filters-with-dependency-injection/"/>
    <updated>2013-10-06T20:39:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/06/mvc-filters-with-dependency-injection</id>
    <content type="html"><![CDATA[<p>One of the most powerful features of the MVC OnRamp is the ability to have MVC Filters injected via our Inversion of Control (IoC) container, Castle.Windsor.  There are several types of filters supported by ASP.NET MVC that allow you to handle orthogonal issues such as:</p>

<ul>
<li><code>IExceptionFilter</code> which is invoked whenever unhandled exceptions occur.</li>
<li><code>IActionFilter</code> which is invoked just before and just after specific actions.</li>
<li><code>IAuthorizationFilter</code> which is invoked when authorizing requests.</li>
<li><code>IResultFilter</code> which is invoked on just before and just after results are returned.</li>
</ul>


<p>Normally these filters are applied one of two ways:</p>

<ul>
<li>Globally via specification in the App_Start, which can easily be resolved from the IoC container but which must be global in scope, and hence somewhat limiting.</li>
<li>Via Attribute on either a Controller or Action, which cannot be resolved from the IoC because we have no control over the instantiation of those attributes.</li>
</ul>


<p>But MVC allows for another option, which is an <code>IFilterProvider</code>, this interface is called at the outset of any request, and is allowed to return at runtime instances of filters which are to be applied.  Using this interface, we have created a class that resolves filters from within Castle.Windsor.  Consider the following class:</p>

<p>``` csharp
public class IoCFilterProvider : IFilterProvider
{</p>

<pre><code>private readonly IEnumerable&lt;Func&lt;ControllerContext, ActionDescriptor, Filter&gt;&gt; registeredFilters;

public IoCFilterProvider(Func&lt;ControllerContext, ActionDescriptor, Filter&gt;[] registeredFilters)
{
    this.registeredFilters = registeredFilters;
}

public IEnumerable&lt;Filter&gt; GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor)
{
    return registeredFilters.Select(m =&gt; m.Invoke(controllerContext, actionDescriptor)).Where(m =&gt; m != null);
}
</code></pre>

<p>}
```</p>

<p>This simple class takes as a dependencies an array of delegates, speficically an array of <code>Func&lt;&gt;</code> delegates which receive as parameters the <code>ControllerContext</code> and <code>ActionDescriptor</code> and which return an instance of the <code>Filter</code> class.</p>

<ul>
<li>The <code>ControllerContext</code> class describes the controller that is about to be called.</li>
<li>The <code>ActionDescriptor</code> class describes the action on that controller which is about to be called.</li>
</ul>


<p>Given this information, you can decide to either return a <code>Filter</code> which will be applied, or return a null which will take no action.</p>

<h1>How do I register a filter?</h1>

<p>In our <code>FilterInstaller</code> class you will see an example of registering such a filter:</p>

<p>``` csharp
public class FilterInstaller : IWindsorInstaller
{</p>

<pre><code>public void Install(IWindsorContainer container, IConfigurationStore store)
{
    container.Register(
        Component.For&lt;IFilterProvider&gt;().ImplementedBy&lt;IoCFilterProvider&gt;(),
        Component.For&lt;ExceptionLoggingFilter&gt;().ImplementedBy&lt;ExceptionLoggingFilter&gt;(),
        Component.For&lt;Func&lt;ControllerContext,ActionDescriptor,Filter&gt;&gt;().Instance(
            (c,a) =&gt; new Filter(container.Resolve&lt;ExceptionLoggingFilter&gt;(), FilterScope.Last, int.MinValue))
        );
}
</code></pre>

<p>}
```</p>

<p>On line 8, we register a <code>Func&lt;ControllerContext,ActionDescriptor,Filter&gt;</code> and state that we will provide a specific instance of that delegate to be used.</p>

<p>On line 9, we use the lambda syntax to declare a delegate, which is provided <code>(c,a)</code> as the parameters of type <code>ControllerContext</code> and <code>ActionDescriptor</code>, and which has a body of:</p>

<p><code>csharp
new Filter(container.Resolve&lt;ExceptionLoggingFilter&gt;(), FilterScope.Last, int.MinValue)
</code></p>

<p>In this simple case, we create an instance of the <code>System.Web.Mvc.Filter</code> class and provide it our <code>ExceptionLoggingFilter</code> resolved from the container, and then tell the Filter to run in the <code>FilterScope.Last</code>, aka run this filter after all others, and order it within that scope using the <code>int.MinValue</code>, aka I really mean last of all last filters.</p>

<p>You can easily extend these registrations to include other filters by simply registering their delegates with the container and deciding when to return an instance of <code>Filter</code> and when to return <code>null</code> based on your business need.  Our example always returns, because we want to always log exceptions, but that is not required.  If your delegate examines the input data and determines it does not need to run a filter, simply return <code>null</code>.</p>
]]></content>
  </entry>
  
</feed>
