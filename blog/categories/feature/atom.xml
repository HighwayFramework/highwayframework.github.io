<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: feature | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/feature/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2013-10-08T17:57:53-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVC Filters with Dependency Injection]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/06/mvc-filters-with-dependency-injection/"/>
    <updated>2013-10-06T20:39:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/06/mvc-filters-with-dependency-injection</id>
    <content type="html"><![CDATA[<p>One of the most powerful features of the MVC OnRamp is the ability to have MVC Filters injected via our Inversion of Control (IoC) container, Castle.Windsor.  There are several types of filters supported by ASP.NET MVC that allow you to handle orthogonal issues such as:</p>

<ul>
<li><code>IExceptionFilter</code> which is invoked whenever unhandled exceptions occur.</li>
<li><code>IActionFilter</code> which is invoked just before and just after specific actions.</li>
<li><code>IAuthorizationFilter</code> which is invoked when authorizing requests.</li>
<li><code>IResultFilter</code> which is invoked on just before and just after results are returned.</li>
</ul>


<p>Normally these filters are applied one of two ways:</p>

<ul>
<li>Globally via specification in the App_Start, which can easily be resolved from the IoC container but which must be global in scope, and hence somewhat limiting.</li>
<li>Via Attribute on either a Controller or Action, which cannot be resolved from the IoC because we have no control over the instantiation of those attributes.</li>
</ul>


<p>But MVC allows for another option, which is an <code>IFilterProvider</code>, this interface is called at the outset of any request, and is allowed to return at runtime instances of filters which are to be applied.  Using this interface, we have created a class that resolves filters from within Castle.Windsor.  Consider the following class:</p>

<p>``` csharp
public class IoCFilterProvider : IFilterProvider
{</p>

<pre><code>private readonly IEnumerable&lt;Func&lt;ControllerContext, ActionDescriptor, Filter&gt;&gt; registeredFilters;

public IoCFilterProvider(Func&lt;ControllerContext, ActionDescriptor, Filter&gt;[] registeredFilters)
{
    this.registeredFilters = registeredFilters;
}

public IEnumerable&lt;Filter&gt; GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor)
{
    return registeredFilters.Select(m =&gt; m.Invoke(controllerContext, actionDescriptor)).Where(m =&gt; m != null);
}
</code></pre>

<p>}
```</p>

<p>This simple class takes as a dependencies an array of delegates, speficically an array of <code>Func&lt;&gt;</code> delegates which receive as parameters the <code>ControllerContext</code> and <code>ActionDescriptor</code> and which return an instance of the <code>Filter</code> class.</p>

<ul>
<li>The <code>ControllerContext</code> class describes the controller that is about to be called.</li>
<li>The <code>ActionDescriptor</code> class describes the action on that controller which is about to be called.</li>
</ul>


<p>Given this information, you can decide to either return a <code>Filter</code> which will be applied, or return a null which will take no action.</p>

<h1>How do I register a filter?</h1>

<p>In our <code>FilterInstaller</code> class you will see an example of registering such a filter:</p>

<p>``` csharp
public class FilterInstaller : IWindsorInstaller
{</p>

<pre><code>public void Install(IWindsorContainer container, IConfigurationStore store)
{
    container.Register(
        Component.For&lt;IFilterProvider&gt;().ImplementedBy&lt;IoCFilterProvider&gt;(),
        Component.For&lt;ExceptionLoggingFilter&gt;().ImplementedBy&lt;ExceptionLoggingFilter&gt;(),
        Component.For&lt;Func&lt;ControllerContext,ActionDescriptor,Filter&gt;&gt;().Instance(
            (c,a) =&gt; new Filter(container.Resolve&lt;ExceptionLoggingFilter&gt;(), FilterScope.Last, int.MinValue))
        );
}
</code></pre>

<p>}
```</p>

<p>On line 8, we register a <code>Func&lt;ControllerContext,ActionDescriptor,Filter&gt;</code> and state that we will provide a specific instance of that delegate to be used.</p>

<p>On line 9, we use the lambda syntax to declare a delegate, which is provided <code>(c,a)</code> as the parameters of type <code>ControllerContext</code> and <code>ActionDescriptor</code>, and which has a body of:</p>

<p><code>csharp
new Filter(container.Resolve&lt;ExceptionLoggingFilter&gt;(), FilterScope.Last, int.MinValue)
</code></p>

<p>In this simple case, we create an instance of the <code>System.Web.Mvc.Filter</code> class and provide it our <code>ExceptionLoggingFilter</code> resolved from the container, and then tell the Filter to run in the <code>FilterScope.Last</code>, aka run this filter after all others, and order it within that scope using the <code>int.MinValue</code>, aka I really mean last of all last filters.</p>

<p>You can easily extend these registrations to include other filters by simply registering their delegates with the container and deciding when to return an instance of <code>Filter</code> and when to return <code>null</code> based on your business need.  Our example always returns, because we want to always log exceptions, but that is not required.  If your delegate examines the input data and determines it does not need to run a filter, simply return <code>null</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLog and Castle Logging Facility for Logging]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/06/nlog-and-castle-logging-facility-for-logging/"/>
    <updated>2013-10-06T08:50:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/06/nlog-and-castle-logging-facility-for-logging</id>
    <content type="html"><![CDATA[<p>One of the most important features of any application is a good logging strategy.  Because of this, <code>Highway.OnRamp.MVC.Logging</code> brings together two very well established projects to provide a world class logging experience.  First, we use the <a href="http://docs.castleproject.org/Windsor.Logging-Facility.ashx">Castle Logging Facility</a> to provide a common abstraction over logging, so you are not coupled to a specific logging framework.  Then we implement <a href="http://nlog-project.org/">NLog</a> to perform the actual logging, configuring it via the <code>NLog.config</code> file.</p>

<h1>How do I log from a class?</h1>

<p>If you want to log from a class, there is a very simply pattern we recommend you follow:</p>

<p>``` csharp
using Castle.Core.Logging;</p>

<p>public class MyNewClass
{</p>

<pre><code>public MyNewClass()
{
    Logger = NullLogger.Instance;
}

public ILogger Logger { get; set; }
</code></pre>

<p>}
```</p>

<p>The steps are quite simple:</p>

<ul>
<li>Declare a public property of type <code>ILogger</code></li>
<li>Initialize that property in your constructor to <code>NullLogger.Instance</code></li>
</ul>


<p>This uses the ability of Castle.Windsor to do Property injection, so that after you class is constructed Castle Windsor will assign the real logger to that <code>Logger</code> property.  But, if you ever remove the <code>LoggingInstaller</code> your code will continue to work because the <code>NullLogger</code> is a proper implementation of <code>ILogger</code> which does nothing.  This avoids <code>NullReferenceException</code>s when you don&rsquo;t have a Logger injected, for instance during tests.</p>

<h1>How does that get setup to begin with?</h1>

<p>The Logging Facility is setup in the <code>LoggingInstaller</code> class, where we configure it.  A facility is a Castle.Windsor concept for a bundled set of registrations and behaviors.  As you can see, this makes properly configuring something like NLog very easy:</p>

<p>``` csharp
public class LoggingInstaller : IWindsorInstaller
{</p>

<pre><code>public void Install(IWindsorContainer container, IConfigurationStore store)
{

    container.AddFacility&lt;LoggingFacility&gt;(m =&gt; m.UseNLog().WithConfig("NLog.config"));
}
</code></pre>

<p>}
```</p>

<p>That really is all there is to it, we configure the facility to use NLog, and then tell it where the config file is.  Now, the config file we include is very simple:</p>

<p>``` xml
&lt;nlog xmlns=&ldquo;<a href="http://www.nlog-project.org/schemas/NLog.xsd">http://www.nlog-project.org/schemas/NLog.xsd</a>&rdquo;</p>

<pre><code>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  autoReload="true"
  globalThreshold="Debug"&gt;
</code></pre>

<p>  <targets></p>

<pre><code>&lt;target xsi:type="File"
        name="file"
        fileName="${basedir}/Logs/Log.txt"
        archiveEvery="Day" /&gt;
</code></pre>

<p>  </targets></p>

<p>  <rules></p>

<pre><code>&lt;logger name="*" minlevel="Debug" writeTo="file" /&gt;
</code></pre>

<p>  </rules>
</nlog>
```</p>

<p>This configuration sets up a <code>Logs</code> directory that will contain <code>Log.txt</code> as a file which will be archived to another file every day.  It also configures NLog to log all messages Debug and above by default.  Not that while NLog supports a Trace level, below Debug, Castle Logging Facility does not so this essentially says &ldquo;log everything to Logs.txt&rdquo;.  There is a great deal more that can be done with NLog and I encourage you to <a href="https://github.com/nlog/nlog/wiki">review their documentation on config</a>.</p>

<h1>What is logged automatically for me?</h1>

<p>We setup two types of loggers for you automatically;</p>

<ul>
<li>The App_Start component <code>LoggerAnnouncementsWireup</code> logs a message every time your application starts up, and if it properly shuts down.</li>
<li>The filter <code>ExceptionLoggingFilter</code> logs every exception that is unhandled by the application.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebActivator for Composable Startup]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/webactivator-for-composable-startup/"/>
    <updated>2013-10-05T15:09:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/webactivator-for-composable-startup</id>
    <content type="html"><![CDATA[<p>The first and most important piece our OnRamp is the use of <a href="http://www.nuget.org/packages/WebActivatorEx/">WebActivator</a> to allow us to declare classes that will run either just before or just after the App_Start event of your ASP.NET application, or when your application shuts down.  This is accomplished using an assembly level attribute, pointing to a particular static class and method.</p>

<p>Consider the following class declaration from our <code>IoC.cs</code> file:</p>

<p>``` csharp
[assembly: WebActivator.PreApplicationStartMethod(typeof(Templates.App_Start.IoC), &ldquo;Startup&rdquo;)]
namespace Templates.App_Start
{</p>

<pre><code>public static class IoC
{
    public static void Startup()
    {
      // Details here described in the next feature…
    }
}
</code></pre>

<p>}
```</p>

<p>Note how we declare the <code>PreApplicationStartMethod</code>, and point to the type of <code>Templates.App_Start.IoC</code> and then the <code>"Startup"</code> string lets it know which method to run.  This results in our <code>IoC.Startup()</code> method being called before App_Start.</p>

<p>Just as there is <code>PreApplicationStartMethod</code>, there is also <code>PostApplicationStartMethod</code> and <code>ApplicationShutdownMethod</code>, both of which are used in our Logging wire up which will be discussed later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Castle Windsor with Auto Discovered Installers]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/castle-windsor-with-auto-discovered-installers/"/>
    <updated>2013-10-05T15:07:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/castle-windsor-with-auto-discovered-installers</id>
    <content type="html"><![CDATA[<h1>Configuring Castle Windsor</h1>

<p>Dependency injection is a key part of good software development, it is the D or <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>, and yet is not something <a href="http://microsoft.com">Microsoft</a> ships a solution for.  As such, we have turned to the community and the long standing, well supported, king of IoC : <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a></p>

<p>We configure Windsor with a set of reasonable defaults, and enable a few features which some people may not be aware of, to make it is painless as possible.  In our <code>IoC.Startup()</code> method, we do the following:</p>

<p>``` csharp</p>

<pre><code>    [Obsolete("Container should never be accessed directly outside of App_Start")]
    public static IWindsorContainer Container { get; set; }

    public static void Startup()
    {
#pragma warning disable 618
        // Create the container
        Container = new WindsorContainer();

        // Add the Array Resolver, so we can take dependencies on T[]
        // while only registering T.
        Container.Kernel.Resolver.AddSubResolver(new ArrayResolver(Container.Kernel));

        // Register the kernel and container, in case an installer needs it.
        Container.Register(
            Component.For&lt;IKernel&gt;().Instance(Container.Kernel),
            Component.For&lt;IWindsorContainer&gt;().Instance(Container)
            );

        // Search for an use all installers in this application.
        Container.Install(FromAssembly.This());
#pragma warning restore 618
    }
</code></pre>

<p>```</p>

<p>We make your instance of <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a> available via <code>IoC.Container</code> but we have specifically marked that as <code>[Obsolete]</code> because you should not be accessing the container directly.  Instead, we want to encourage you to rely on our injection of dependencies into your Controllers, and never directly access the container outside of App_Start.</p>

<h2>Accessing the Container without an Obsolete Warning</h2>

<p>Now, on rare occasions there will be perfectly reasonable pragmatic reasons to need to access the container.  This is the reason why we have marked the <code>[Obsolete]</code> merely as a warning, and then included the <code>#pragma</code> statements to disable those warnings in places you are accepting the need to directly access the container.  When those occur, simply surround your code with :</p>

<p>```</p>

<pre><code>#pragma warning disable 618
#pragma warning restore 618
</code></pre>

<p>```</p>

<p>You should keep such sections small, and should be aware that the <code>#pragma</code> statements will also disable any other <code>[Obsolete]</code> warnings that occur between them, not just those for the <code>IoC.Container</code>.</p>

<h1>Discovering Installers</h1>

<p>Our code above includes one very small, but very powerful line that is worth highlighting:</p>

<p><code>
Container.Install(FromAssembly.This());
</code></p>

<p>This statement tells <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a> to scan the <strong>current assembly</strong>, looking for classes which implement the <code>IWindsorInstaller</code> interface, and to execute those components, allowing them to register components with the container.  This auto discovery is one of the best features of our IoC implementation, allowing you to segregate your registrations into small, related pieces, as you will see.</p>

<h1>Included Installers</h1>

<p>We have included several installers for you, in the various packages of Highway.OnRamp.MVC.   They are all located in the <code>Installers</code> folder of your MVC solution.  Here are their names and purposes:</p>

<ul>
<li>ControllerInstaller &ndash; Scans the current assembly for all types that implement <code>IController</code> from System.Web.Mvc and registers them with <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a>.  This means you never have to register your controllers manually.</li>
<li>LoggingInstaller &ndash; Configures the Castle Logging Facility, and wires it to NLog.  We will cover this is more detail when we discuss the Logging feature.</li>
<li>FilterInstaller &ndash; Is where you register all MVC filters.  We will cover this in more detail when we discuss Filter Injection.</li>
<li>HighwayDataInstaller &ndash; Is the configuration and registrations for using Highway.Data.EntityFramework for your database.  It will be covered in more detail when we discuss Data Access.</li>
</ul>

]]></content>
  </entry>
  
</feed>
