<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: feature | The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/blog/categories/feature/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2016-04-02T14:23:21-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Session and Configuration access via Interfaces]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/session-and-configuration-access-via-interfaces/"/>
    <updated>2014-01-25T19:33:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/session-and-configuration-access-via-interfaces</id>
    <content type="html"><![CDATA[<p>There are two things which are historically very hard to deal with when unit testing a websites, these are configuration values, and session variables.  They both present largely the same problem, they are normally accessible via an API that is not conducive to testing, both are static classes, and that API retrieves data from them via &ldquo;magic strings&rdquo;.  The Castle Project has a wonderful component within it called <code>DictionaryAdapter</code> which can help solve these pains for us very easily, once you understand how it works.</p>

<h1>Dictionary Adapter</h1>

<p>Dictionary Adapter is a class which creates classes at runtime that implement an interface you specify, and wires the properties of said interface to access a key value store you specify.  For instance, let&rsquo;s assume you have the following interface:</p>

<p>```
public interface IConnectionStringConfig
{</p>

<pre><code>string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<p>And the following configuration settings in your web.config:</p>

<p>```
  <appSettings></p>

<pre><code>&lt;add key="ConnectionString" value="Server=.;Database=ChangeMyConnectionString;Integrated Security=true;" /&gt;
</code></pre>

<p>  </appSettings>
```</p>

<p>Now we can ask Dictionary Adapter to create an instance of <code>IConnectionString</code>, and supply it the app settings from our web.config.  It will return to us a class which implements our interface, and when that when the <code>ConnectionString</code> property is accessed, will retrieve the value from app settings.</p>

<p>Now instead of writing controllers, or other classes which access app settings directly from the <code>ConfigurationManager</code>, we can instead simply take a dependency on <code>IConnectionString</code>, and that class can in turn use a strongly typed (no magic strings) and testable (simply mock the interface) way of accessing app settings.</p>

<p>Just as we can do this with the key value store of app settings, we can also do it with the key value store of <code>Session</code> as well.  This makes accessing session also no longer require magic strings, and addresses the problem of mocking an <code>HttpContext</code> for <code>Session</code>.</p>

<h1>Wiring it up with Windsor</h1>

<p>As awesome as that is, manually registering all of the configuration or session interfaces would be rather tedious in the extreme.  As such we&rsquo;ve created some conventions you can use that will automatically register these interfaces for you.</p>

<h2>Config interfaces</h2>

<p>Any interface in your application&rsquo;s assembly which has a name that ends in <strong>Config</strong> will automatically be registered with our IoC container with a class instance provided by <code>DictionaryAdapter</code>.  These classes are registered as Singleton lifestyle, because they continue to directly access the <code>ConfigurationManager</code> and so even if your configuration values change at runtime, they will stay up to date.</p>

<h2>Session interfaces</h2>

<p>Any interface in your application&rsquo;s assembly which has a name that ends in <strong>Session</strong> will automatically be registered with our IoC container with a class instance provided by <code>DictionaryAdapter</code>.  These classes are registered with a <code>PerWebRequest</code> lifestyle, because every request will have a different <code>HttpContext</code>.</p>

<h1>What about keys which don&rsquo;t match property names?</h1>

<p>A common scenario for users of DictionaryAdapter to run into is that they want properties on their interfaces which do not match their key value store&rsquo;s key values exactly.  This is easy to run into simply because of the limitations of property names, for instance &ldquo;ida:ClientSecret&rdquo; is not a valid property name.  So how do we handle this?</p>

<p>DictionaryAdapter provides a set of attributes which can help address these concerns.  We&rsquo;ll talk about each in turn, here they are:</p>

<ul>
<li><code>KeyAttribute</code></li>
<li><code>KeyPrefixAttribute</code></li>
<li><code>KeySuffixAttribute</code></li>
</ul>


<h2>Key</h2>

<p>The simplest and often most useful of our helper attributes is <code>KeyAttribute</code>.  This attribute when applied to a property completely changes the key in the key value store that is accessed for our property.  For instance, given the following interface, the <code>ConnectionSting</code> property returns &ldquo;Foo&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeyAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[Key("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<h2>KeyPrefixAttribute</h2>

<p>The next most common attribute to be used, and one which we use by default in the Data extension to the OnRamp, is <code>KeyPrefixAttirbute</code>.  This attribute is applied to the interface, not the properties, and affects the keys used in the key value store for all properties on that interface.  For instance, given the following interface, the ConnectionSting property returns &ldquo;FooConnectionString&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeyPrefixAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[KeyPrefix("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>

<h2>KeySuffixAttribute</h2>

<p>The third and final attribute we will discuss here is <code>KeySuffixAttribute</code>.  Like <code>KeyPrefixAttribute</code> this is applied to the interface, not the property, and affects the key values for all properties on that interface.  For instance, given the following interface, the <code>ConnectionSting</code> property returns &ldquo;ConnectionStringFoo&rdquo; setting instead of &ldquo;ConnectionString&rdquo; because of the <code>KeySuffixAttribute</code>.</p>

<p>```
public interface IExampleConfig
{</p>

<pre><code>[Key("Foo")]
string ConnectionString { get; }
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy RESTful ApiControllers]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/easy-restful-apicontrollers/"/>
    <updated>2014-01-25T19:09:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/easy-restful-apicontrollers</id>
    <content type="html"><![CDATA[<p>Using the Domain concepts and Prebuilt Queries of Highway.Data, we have included a basic RESTful base class for your ApiControllers.  This feature is very easy to use, simply inherit from <code>BaseRestApiController</code>.  That base class has two constructor requirements:</p>

<ol>
<li><code>IDomainRepositoryFactory</code> this class comes from Highway.Data and is already registered with our IoC.</li>
<li><code>RestfulOperations</code> this is a <strong>FLAGS</strong> enumeration that lets you control how the base class behaves.</li>
</ol>


<p>An implementation controller would look like this:</p>

<p>``` csharp
public class DriverController : BaseRestApiController&lt;Domain, Driver, Guid>
{</p>

<pre><code>public DriverController(IDomainRepositoryFactory factory) :
    base(factory, RestfulOperations.All) { }

public override CopyEntityValues(Driver source, Driver destination)
{
    // copy values from one instance to another here.
}
</code></pre>

<p>}
```</p>

<p>This class would support all five of our pre-built functions, because it passed <code>RestfulOperations.All</code>, these are:</p>

<ul>
<li>GetAll &ndash; This is the default get with no <code>id</code> and returns ALL Drivers</li>
<li>GetOne &ndash; This returns one driver, by <code>id</code></li>
<li>Put &ndash; Accepts a <code>PUT</code> verb and updates a singular Driver.  Uses <code>CopyEntityValues</code> above to control what can be updated.</li>
<li>Delete &ndash; Deletes a Driver by <code>id</code></li>
<li>Post &ndash; Accepts a <code>POST</code> verb and inserts a singular Driver.</li>
</ul>


<p>Importantly this enums is <strong>FLAGS</strong> based, and as such the values can be OR'ed together.  For instance, if you wanted to just support GetOne and Post you could change the line above to:</p>

<p>```</p>

<pre><code>public DriverController(IDomainRepositoryFactory factory) :
    base(factory, RestfulOperations.GetOne | RestfulOperations.Post) { }
</code></pre>

<p>```</p>

<p>There are some logical pre-built combinations already supported in the enum, which is defined as follows:</p>

<p>```</p>

<pre><code>    [Flags]
    public enum RestOperations
    {
        GetAll = 1,
        GetOne = 2,
        Post = 4,
        Put = 8,
        Delete = 16,
        ReadOnly = 3,
        WriteOnly = 28,
        All = 31
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplified Creation Patterns]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/simplified-creation-patterns/"/>
    <updated>2014-01-25T16:45:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/simplified-creation-patterns</id>
    <content type="html"><![CDATA[<h1>Simplified Creation Patterns</h1>

<h3>Repository Factory</h3>

<p>We wanted to provide a simple way to construct both domain repositories and simple Repositories. This lead us to create two different factories for repository. We ship a default factory for both of these, but we also ship interfaces for these as a test and extension point.</p>

<h4>Repository Factory</h4>

<p>This allows you to construct a simple repository that doesn&rsquo;t need any of the <code>DomainRepository</code> features.</p>

<p>```</p>

<pre><code>public interface IRepositoryFactory
{
    /// &lt;summary&gt;
    /// Creates a repository for the requested domain
    /// &lt;/summary&gt;
    /// &lt;returns&gt;Domain specific repository&lt;/returns&gt;
    IRepository Create();
}
</code></pre>

<p>```</p>

<h4>Domain Repository Factory</h4>

<p>This allows you construct a repository specific to any domain that the factory is dependent on.</p>

<p>```</p>

<pre><code>public interface IDomainRepositoryFactory
{

    /// &lt;summary&gt;
    /// Creates a repository for the specified &lt;see cref="IDomain"/&gt;
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;Domain for repository&lt;/typeparam&gt;
    /// &lt;returns&gt;&lt;see cref="IRepository"/&gt;&lt;/returns&gt;
    IRepository Create&lt;T&gt;() where T : class, IDomain;

    /// &lt;summary&gt;
    /// Creates a repository for the specified &lt;see cref="IDomain"/&gt;
    /// &lt;/summary&gt;
    /// &lt;param name="T"&gt;Domain for repository&lt;/param&gt;
    /// &lt;returns&gt;&lt;see cref="IRepository"/&gt;&lt;/returns&gt;
    IRepository Create(Type type);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Context]]></title>
    <link href="http://hwyfwk.com/blog/2014/01/25/domain-context/"/>
    <updated>2014-01-25T16:42:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2014/01/25/domain-context</id>
    <content type="html"><![CDATA[<h1>Domain Context and Domain Driven Design (DDD) Patterns</h1>

<h2>Why did you support DDD?</h2>

<p>We have been working in large complex applications for the last several projects and found some rough edges around both business logic and data access. These edges come from not separating the business concepts effectively in code. Long running business sagas being isolated helped to solve this. We added this advanced support to Highway.Data to help make this easier for us, and those like us that have drank the DDD punch.</p>

<h2>How did you support DDD?</h2>

<p>We added a few classes to help support the ability to create domain bounded contexts. These use a generic type parameter to define which domain they contain, and also to segregate the in memory cache for mappings. This allows us to load differing views on similar objects.</p>

<h3>IDomainRepository</h3>

<p>This repository has the event interception events, as well as the bounded context.</p>

<p>``` csharp</p>

<pre><code>public interface IDomainRepository&lt;in T&gt; where T : class
{
    event EventHandler&lt;BeforeQuery&gt; BeforeQuery;

    event EventHandler&lt;BeforeScalar&gt; BeforeScalar;

    event EventHandler&lt;BeforeCommand&gt; BeforeCommand;

    event EventHandler&lt;AfterQuery&gt; AfterQuery;

    event EventHandler&lt;AfterScalar&gt; AfterScalar;

    event EventHandler&lt;AfterCommand&gt; AfterCommand;

    IDomainContext&lt;T&gt; DomainContext { get; } 
}
</code></pre>

<p>```</p>

<h3>IDomainContext</h3>

<p>This context holds the context level interception events, and is contrained to a <code>IDomain</code> type.</p>

<p>```</p>

<pre><code>public interface IDomainContext&lt;in T&gt; : IDataContext where T : class
{
    /// &lt;summary&gt;
    ///     The event fired just before the commit of the persistence
    /// &lt;/summary&gt;
    event EventHandler&lt;BeforeSave&gt; BeforeSave;

    /// &lt;summary&gt;
    ///     The event fired just after the commit of the persistence
    /// &lt;/summary&gt;
    event EventHandler&lt;AfterSave&gt; AfterSave;
}
</code></pre>

<p>```</p>

<h3>IDomain</h3>

<p>This is the interface that you implement to define a domain for your objects. It includes any event interceptors, context configurations, connection string, and object mappings.</p>

<p>```</p>

<pre><code>public interface IDomain
{
    string ConnectionString { get; }

    IMappingConfiguration Mappings { get;}

    IContextConfiguration Context { get; }

    List&lt;IInterceptor&gt; Events { get; }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Conventions]]></title>
    <link href="http://hwyfwk.com/blog/2013/11/06/naming-conventions/"/>
    <updated>2013-11-06T11:37:00-06:00</updated>
    <id>http://hwyfwk.com/blog/2013/11/06/naming-conventions</id>
    <content type="html"><![CDATA[<p>Starting in version 3.0 of Highway.OnRamp.MVC we have made a sincere effort to clarify naming conventions so you can understand the purpose of each piece of the OnRamp.  We have several important naming and organization conventions.</p>

<h2>Naming Conventions</h2>

<h3>Activators</h3>

<p>Activators are classes that run when a process is starting up.  For Highway.OnRamp.MVC this means as part of the <code>HttpApplication</code> cycle.  <a href="/blog/2013/10/05/webactivator-for-composable-startup/">We talk about WebActivator and how we accomplish this elsewhere</a>, but if a class name ends with <code>Activator</code> you know it runs during application startup.</p>

<h3>Configs</h3>

<p>Interfaces where the name ends with <code>Config</code> are configured automatically at run-time to provide values from <code>web.config</code>.  This provides you the ability to mock these quickly in tests, and not litter your code with &ldquo;magic strings&rdquo; for accessing configuration values.</p>

<h3>Sessions</h3>

<p>Interfaces where the name ends with <code>Session</code> are configured automatically at run-time to provide values from the current ASP.NET Session.  This provides you the ability to mock these quickly in tests, and not litter your code with &ldquo;magic strings&rdquo; for accessing session variables.</p>

<h3>Installers</h3>

<p>Classes that implement <code>IWindsorInstaller</code> are named with the <code>Installer</code> suffix and are used to register components with the IoC.  Please note there is no guarantee of order of execution of these installers, but they do run at the end of the <code>WindsorActivator</code> so anything it sets up can be assumed.</p>

<h2>Organization Conventions</h2>

<h3>App_Architecture</h3>

<p>The <code>App_Architecture</code> folder contains all our structure related to startup events, IoC registration, concrete classes for registered interfaces, etc.  We believe that we&rsquo;ve achieved an organization structure that your business code should never need to take a <code>using</code> statement to things within this folder.  This is the self-contained area which handles all of the wire-up aspects of the OnRamp, and while it will effect how your app runs, the classes should not need to be directly referenced.</p>

<h4>App_Architecture \ Services</h4>

<p>This folder contains a <code>Core</code> folder for classes support Highway.OnRamp.MVC, but then also contains folders for each plug-in to the OnRamp which contains their classes.  For instance, if you bring in Highway.OnRamp.MVC.Data it will also contain a <code>Data</code> folder which has classes required by that plug-in.</p>

<h3>Entities &amp; Mappings</h3>

<p>If you bring in Highway.OnRamp.MVC.Data you will get an <code>Entities</code> folder, and it&rsquo;s sub-folder <code>Mappings</code>.  This is meant to contain all of your Entity Framework entities, as the <code>Mappings</code> folder is meant to contain classes which implement <code>EntityTypeConfiguration&lt;T&gt;</code> classes that configure Entity Framework on how to map those entities.</p>
]]></content>
  </entry>
  
</feed>
