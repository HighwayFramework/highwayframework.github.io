<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The fastest and smoothest way to good architecture]]></title>
  <link href="http://hwyfwk.com/atom.xml" rel="self"/>
  <link href="http://hwyfwk.com/"/>
  <updated>2013-10-06T20:05:29-05:00</updated>
  <id>http://hwyfwk.com/</id>
  <author>
    <name><![CDATA[Tim Rayburn & Devlin Liles]]></name>
    <email><![CDATA[Team@HwyFwk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NLog and Castle Logging Facility for Logging]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/06/nlog-and-castle-logging-facility-for-logging/"/>
    <updated>2013-10-06T08:50:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/06/nlog-and-castle-logging-facility-for-logging</id>
    <content type="html"><![CDATA[<p>One of the most important features of any application is a good logging strategy.  Because of this, <code>Highway.OnRamp.MVC.Logging</code> brings together two very well established projects to provide a world class logging experience.  First, we use the <a href="http://docs.castleproject.org/Windsor.Logging-Facility.ashx">Castle Logging Facility</a> to provide a common abstraction over logging, so you are not coupled to a specific logging framework.  Then we implement <a href="http://nlog-project.org/">NLog</a> to perform the actual logging, configuring it via the <code>NLog.config</code> file.</p>

<h1>How do I log from a class?</h1>

<p>If you want to log from a class, there is a very simply pattern we recommend you follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Castle.Core.Logging</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyNewClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyNewClass</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Logger</span> <span class="p">=</span> <span class="n">NullLogger</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="n">ILogger</span> <span class="n">Logger</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The steps are quite simple:</p>

<ul>
<li>Declare a public property of type <code>ILogger</code></li>
<li>Initialize that property in your constructor to <code>NullLogger.Instance</code></li>
</ul>


<p>This uses the ability of Castle.Windsor to do Property injection, so that after you class is constructed Castle Windsor will assign the real logger to that <code>Logger</code> property.  But, if you ever remove the <code>LoggingInstaller</code> your code will continue to work because the <code>NullLogger</code> is a proper implementation of <code>ILogger</code> which does nothing.  This avoids <code>NullReferenceException</code>s when you don&rsquo;t have a Logger injected, for instance during tests.</p>

<h1>How does that get setup to begin with?</h1>

<p>The Logging Facility is setup in the <code>LoggingInstaller</code> class, where we configure it.  A facility is a Castle.Windsor concept for a bundled set of registrations and behaviors.  As you can see, this makes properly configuring something like NLog very easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LoggingInstaller</span> <span class="p">:</span> <span class="n">IWindsorInstaller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Install</span><span class="p">(</span><span class="n">IWindsorContainer</span> <span class="n">container</span><span class="p">,</span> <span class="n">IConfigurationStore</span> <span class="n">store</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">container</span><span class="p">.</span><span class="n">AddFacility</span><span class="p">&lt;</span><span class="n">LoggingFacility</span><span class="p">&gt;(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">UseNLog</span><span class="p">().</span><span class="n">WithConfig</span><span class="p">(</span><span class="s">&quot;NLog.config&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That really is all there is to it, we configure the facility to use NLog, and then tell it where the config file is.  Now, the config file we include is very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;nlog</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span>
</span><span class='line'>      <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>      <span class="na">autoReload=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>      <span class="na">globalThreshold=</span><span class="s">&quot;Debug&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;targets&gt;</span>
</span><span class='line'>    <span class="nt">&lt;target</span> <span class="na">xsi:type=</span><span class="s">&quot;File&quot;</span>
</span><span class='line'>            <span class="na">name=</span><span class="s">&quot;file&quot;</span>
</span><span class='line'>            <span class="na">fileName=</span><span class="s">&quot;${basedir}/Logs/Log.txt&quot;</span>
</span><span class='line'>            <span class="na">archiveEvery=</span><span class="s">&quot;Day&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/targets&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;rules&gt;</span>
</span><span class='line'>    <span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&quot;*&quot;</span> <span class="na">minlevel=</span><span class="s">&quot;Debug&quot;</span> <span class="na">writeTo=</span><span class="s">&quot;file&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/rules&gt;</span>
</span><span class='line'><span class="nt">&lt;/nlog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration sets up a <code>Logs</code> directory that will contain <code>Log.txt</code> as a file which will be archived to another file every day.  It also configures NLog to log all messages Debug and above by default.  Not that while NLog supports a Trace level, below Debug, Castle Logging Facility does not so this essentially says &ldquo;log everything to Logs.txt&rdquo;.  There is a great deal more that can be done with NLog and I encourage you to <a href="https://github.com/nlog/nlog/wiki">review their documentation on config</a>.</p>

<h1>What is logged automatically for me?</h1>

<p>We setup two types of loggers for you automatically;</p>

<ul>
<li>The App_Start component <code>LoggerAnnouncementsWireup</code> logs a message every time your application starts up, and if it properly shuts down.</li>
<li>The filter <code>ExceptionLoggingFilter</code> logs every exception that is unhandled by the application.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebActivator for Composable Startup]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/webactivator-for-composable-startup/"/>
    <updated>2013-10-05T15:09:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/webactivator-for-composable-startup</id>
    <content type="html"><![CDATA[<p>The first and most important piece our OnRamp is the use of <a href="http://www.nuget.org/packages/WebActivatorEx/">WebActivator</a> to allow us to declare classes that will run either just before or just after the App_Start event of your ASP.NET application, or when your application shuts down.  This is accomplished using an assembly level attribute, pointing to a particular static class and method.</p>

<p>Consider the following class declaration from our <code>IoC.cs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[assembly: WebActivator.PreApplicationStartMethod(typeof(Templates.App_Start.IoC), &quot;Startup&quot;)]</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Templates.App_Start</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">IoC</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Startup</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Details here described in the next feature…</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how we declare the <code>PreApplicationStartMethod</code>, and point to the type of <code>Templates.App_Start.IoC</code> and then the <code>"Startup"</code> string lets it know which method to run.  This results in our <code>IoC.Startup()</code> method being called before App_Start.</p>

<p>Just as there is <code>PreApplicationStartMethod</code>, there is also <code>PostApplicationStartMethod</code> and <code>ApplicationShutdownMethod</code>, both of which are used in our Logging wire up which will be discussed later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Castle Windsor with Auto Discovered Installers]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/castle-windsor-with-auto-discovered-installers/"/>
    <updated>2013-10-05T15:07:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/castle-windsor-with-auto-discovered-installers</id>
    <content type="html"><![CDATA[<h1>Configuring Castle Windsor</h1>

<p>Dependency injection is a key part of good software development, it is the D or <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>, and yet is not something <a href="http://microsoft.com">Microsoft</a> ships a solution for.  As such, we have turned to the community and the long standing, well supported, king of IoC : <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a></p>

<p>We configure Windsor with a set of reasonable defaults, and enable a few features which some people may not be aware of, to make it is painless as possible.  In our <code>IoC.Startup()</code> method, we do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">    [Obsolete(&quot;Container should never be accessed directly outside of App_Start&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IWindsorContainer</span> <span class="n">Container</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Startup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="cp">#pragma warning disable 618</span>
</span><span class='line'>        <span class="c1">// Create the container</span>
</span><span class='line'>        <span class="n">Container</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WindsorContainer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the Array Resolver, so we can take dependencies on T[]</span>
</span><span class='line'>        <span class="c1">// while only registering T.</span>
</span><span class='line'>        <span class="n">Container</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Resolver</span><span class="p">.</span><span class="n">AddSubResolver</span><span class="p">(</span><span class="k">new</span> <span class="n">ArrayResolver</span><span class="p">(</span><span class="n">Container</span><span class="p">.</span><span class="n">Kernel</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Register the kernel and container, in case an installer needs it.</span>
</span><span class='line'>        <span class="n">Container</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IKernel</span><span class="p">&gt;().</span><span class="n">Instance</span><span class="p">(</span><span class="n">Container</span><span class="p">.</span><span class="n">Kernel</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IWindsorContainer</span><span class="p">&gt;().</span><span class="n">Instance</span><span class="p">(</span><span class="n">Container</span><span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Search for an use all installers in this application.</span>
</span><span class='line'>        <span class="n">Container</span><span class="p">.</span><span class="n">Install</span><span class="p">(</span><span class="n">FromAssembly</span><span class="p">.</span><span class="n">This</span><span class="p">());</span>
</span><span class='line'><span class="cp">#pragma warning restore 618</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We make your instance of <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a> available via <code>IoC.Container</code> but we have specifically marked that as <code>[Obsolete]</code> because you should not be accessing the container directly.  Instead, we want to encourage you to rely on our injection of dependencies into your Controllers, and never directly access the container outside of App_Start.</p>

<h2>Accessing the Container without an Obsolete Warning</h2>

<p>Now, on rare occasions there will be perfectly reasonable pragmatic reasons to need to access the container.  This is the reason why we have marked the <code>[Obsolete]</code> merely as a warning, and then included the <code>#pragma</code> statements to disable those warnings in places you are accepting the need to directly access the container.  When those occur, simply surround your code with :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#pragma warning disable 618</span>
</span><span class='line'><span class="cp">#pragma warning restore 618</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should keep such sections small, and should be aware that the <code>#pragma</code> statements will also disable any other <code>[Obsolete]</code> warnings that occur between them, not just those for the <code>IoC.Container</code>.</p>

<h1>Discovering Installers</h1>

<p>Our code above includes one very small, but very powerful line that is worth highlighting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Container</span><span class="p">.</span><span class="n">Install</span><span class="p">(</span><span class="n">FromAssembly</span><span class="p">.</span><span class="n">This</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>This statement tells <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a> to scan the <strong>current assembly</strong>, looking for classes which implement the <code>IWindsorInstaller</code> interface, and to execute those components, allowing them to register components with the container.  This auto discovery is one of the best features of our IoC implementation, allowing you to segregate your registrations into small, related pieces, as you will see.</p>

<h1>Included Installers</h1>

<p>We have included several installers for you, in the various packages of Highway.OnRamp.MVC.   They are all located in the <code>Installers</code> folder of your MVC solution.  Here are their names and purposes:</p>

<ul>
<li>ControllerInstaller &ndash; Scans the current assembly for all types that implement <code>IController</code> from System.Web.Mvc and registers them with <a href="http://docs.castleproject.org/Default.aspx?Page=MainPage&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1">Castle.Windsor</a>.  This means you never have to register your controllers manually.</li>
<li>LoggingInstaller &ndash; Configures the Castle Logging Facility, and wires it to NLog.  We will cover this is more detail when we discuss the Logging feature.</li>
<li>FilterInstaller &ndash; Is where you register all MVC filters.  We will cover this in more detail when we discuss Filter Injection.</li>
<li>HighwayDataInstaller &ndash; Is the configuration and registrations for using Highway.Data.EntityFramework for your database.  It will be covered in more detail when we discuss Data Access.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.Pavement v0.3]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/highway-dot-pavement-v0-dot-3/"/>
    <updated>2013-10-05T12:22:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/highway-dot-pavement-v0-dot-3</id>
    <content type="html"><![CDATA[<h1>Changes</h1>

<ul>
<li>Adding a strong name key to the Highway.Pavement assembly so it can be referenced from signed assemblies.</li>
</ul>


<h1>Notes</h1>

<ul>
<li>Thank you to friend of the project Michael Dudley for pointing out this oversight.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highway.Data v4.1]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/05/highway-dot-data-v4-dot-1/"/>
    <updated>2013-10-05T12:19:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/05/highway-dot-data-v4-dot-1</id>
    <content type="html"><![CDATA[<h1>Changes</h1>

<ul>
<li>Adding a strong name key to all Highway.Data assemblies so they can be referenced from signed assemblies.</li>
</ul>


<h1>Notes</h1>

<ul>
<li>Thank you to friend of the project Michael Dudley for pointing out this oversight.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strong Names]]></title>
    <link href="http://hwyfwk.com/blog/2013/10/04/strong-names/"/>
    <updated>2013-10-04T20:05:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/10/04/strong-names</id>
    <content type="html"><![CDATA[<p>We are thrilled to announce that we have today released an update to Highway.Pavement and Highway.Data which add strong name keys (SNKs) to the assemblies.  Furthermore, in keeping with good open source practices, the cryptographic keys to accomplish this signing are now checked into the source repository for each project.</p>

<!--more-->


<p>Thank you to friend of the project Michael Dudley for prompting us to do something which we should have done some time ago.</p>

<p>Please note, that since we&rsquo;ve introduced these keys, there is a chance some Binding Redirects in your config files may need to be updated.  Here is the public key information if you should need it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Microsoft (R) .NET Framework Strong Name Utility  Version 4.0.30319.17929
</span><span class='line'>Copyright (c) Microsoft Corporation.  All rights reserved.
</span><span class='line'>
</span><span class='line'>Public key (hash algorithm: sha1):
</span><span class='line'>00240000048000009400000006020000002400005253413100040000010001000d9d9349bb0d52
</span><span class='line'>9d9e45bda5d7c7e82852dfd8f8978b6499f712866db11623fb9ff9d616bb5e796f441b3ee5e681
</span><span class='line'>16ba7f8a533a74e87d892226cb3dcf091b9fe476d41e862f5a5d8f768d5ced1c5816282ebdc7ef
</span><span class='line'>8fb3d40709fb4e64b57141c1691f00dcc451a367671de255df03115b001923ec9590870772118e
</span><span class='line'>2cbe65df
</span><span class='line'>
</span><span class='line'>Public key token is fe803c9600455796</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our new site]]></title>
    <link href="http://hwyfwk.com/blog/2013/09/30/our-new-site/"/>
    <updated>2013-09-30T21:12:00-05:00</updated>
    <id>http://hwyfwk.com/blog/2013/09/30/our-new-site</id>
    <content type="html"><![CDATA[<p>Welcome to our new website design, specifically recreated to ensure that you, our amazing community, has a place to find all the documentation, videos, and discussion you could ever want for the projects in the Highway Framework.  We will be adding a lot of content to the site over the next few days.  Please bear with us if there is any dust settling from the move.</p>
]]></content>
  </entry>
  
</feed>
